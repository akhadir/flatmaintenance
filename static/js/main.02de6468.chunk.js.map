{"version":3,"sources":["services/redux/transactions/trans-types.ts","services/redux/transactions/trans-reducer.ts","services/index.ts","services/redux/google-sheet/sheet-types.ts","services/redux/google-sheet/sheet-reducer.ts","services/redux/bills/bills-types.ts","services/redux/bills/bills-reducer.ts","services/redux/root-reducer.js","services/redux/store.ts","components/mapping/secret-dialog/index.tsx","services/googleapis/google-token.ts","services/googleapis/drive-util.ts","services/ocr/index.ts","services/chatgpt/index.ts","components/cash/index.tsx","workspaces/cash.tsx","services/cat-map/cat-index.ts","services/cat-map/month-index.ts","services/maint-map/flat-index.ts","services/maint-map/month-index.ts","services/googleapis/gsheet-util-impl.ts","services/redux/google-sheet/sheet-actions.ts","services/cat-map/cat-map-types.ts","utils/logical-executor.ts","utils/soundex.ts","utils/query-executor.ts","utils/col-query-executor.ts","utils/trans-map-executor.ts","services/cat-map/cat-map.ts","services/maint-map/maint-map.ts","utils/maint-map-executor.ts","utils/trans-category.ts","services/redux/transactions/trans-actions.ts","components/categorizer/categorize-cash.tsx","components/categorizer/categorize-online.tsx","components/categorizer/index.tsx","workspaces/categorizer.tsx","services/ocr/parser-utils.ts","services/pdf-to-image/index.ts","services/ollama/index.ts","services/googleapis/gemini/index.ts","workspaces/new-bills/bill-utils.ts","workspaces/new-bills/bill-row.tsx","workspaces/new-bills/bill-table.tsx","workspaces/new-bills/expense.tsx","workspaces/new-bills/folder-grid.tsx","services/sheet/index.ts","workspaces/new-bills/index.tsx","components/file-upload/index.tsx","services/xlsjs/index.ts","components/file-preview/index.tsx","components/file-save/index.tsx","components/online-transactions/index.tsx","workspaces/online.tsx","components/key-gen/index.tsx","workspaces/key/index.tsx","app-routes.tsx","app.tsx","index.tsx"],"names":["TransActions","initValues","loading","cashTransData","undefined","onlineTransData","monthlyCatSplit","error","transReducder","state","arguments","length","action","type","LOAD_TRANS","LOAD_CASH_TRANS_SUCCESS","payload","LOAD_ONLINE_TRANS_SUCCESS","LOAD_CASH_TRANS_FAILURE","LOAD_ONLINE_TRANS_FAILURE","UPDATE_MONTHLY_SPLIT","RESET_MONTHLY_SPLIT","UPDATE_MONTHLY_MAINT_SPLIT","monthlyMaintSplit","RESET_MONTHLY_MAINT_SPLIT","RESET_TRANS","setCredentials","secret","out","res","emailB","CryptoJS","AES","decrypt","appConfig","ENC_CLIENT_EMAIL","pkB","ENC_PRIVATE_KEY","chatGPTPK","ENC_CHAT_GPT_KEY","googleAPIKey","ENC_GOOGLE_API_KEY","geminiKey","ENC_GEMINI_KEY","ocrSpaceKey","OCR_SPACE_KEY","clientEmail","toString","enc","Utf8","privateKey","chatGPTPrivateKey","sessionStorage","setItem","e","flatNumbers","appData","transCategories","key","label","children","map","val","transactionFinYear","moment","format","transSheetMonth","transactions","SPREADSHEET_ID","getItem","doc","GoogleSpreadsheet","getConfig","AppContext","React","createContext","SHEET_ACTION_TYPES","initialValue","initError","sheetConfig","sheetInfo","Map","sheetReducer","INIT","initializing","INIT_SUCCESS","INIT_FAILURE","SET_SHEET_INFO","BillsActions","isLoading","data","config","encBotId","listURL","fetchURL","downloadURL","updateURL","layoutData","events","billsReducer","SUCCESS","FAILURE","SET_CONFIG","ADD_EVENTS","rootReducer","combineReducers","sheet","trans","bills","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","Thunk","SecretDialog","props","open","setOpen","useState","setSecret","handleOk","useCallback","handleSecret","handleChange","target","value","handleEnter","keyCode","which","_jsxs","Dialog","keepMounted","_jsx","DialogTitle","id","DialogContent","DialogContentText","Input","onChange","onKeyPress","className","errorMsg","DialogActions","Button","onClick","disabled","color","generateTokenAssertion","async","expiresIn","Math","floor","Date","now","clientId","claims","iss","sub","aud","scope","exp","iat","jti","uuid","jwt","sign","algorithm","generateAuthToken","body","grant_type","client_id","assertion","response","axios","post","status","access_token","Error","VERIFIED_FILE_PREFIX","BILLS_FOLDER_ID","fetchFilesFromFolder","folderId","apiKey","query","encodeURI","get","files","console","log","message","renameFile","fileId","name","authToken","patch","headers","Authorization","getOCRSpaceKey","OCR_SPACE_API_URL","getVision","imageURL","formData","FormData","append","axiosRetry","retries","apikey","catch","getDatafromDataURI","blob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","dataURItoBlob","file","File","getData","ChatGPTService","constructor","openAI","this","chatGPTConfig","Configuration","organization","OpenAIApi","getCompleted","text","createCompletion","model","prompt","max_tokens","temperature","top_p","n","stream","logprobs","stop","Promise","resolve","getInstance","instance","CashTransactions","camera","useRef","image","setImage","fullscreen","setFullscreen","takePhoto","cameraRef","current","toggleFullScreen","parentClassName","imageData","setImageData","useEffect","then","ParsedText","ParsedResults","parsedData","JSON","stringify","IconButton","CloseFullscreenIcon","OpenInFullIcon","src","alt","Cash","CAT_INDEX","BWSSB","Diesel","Bescom","Security","MONTH_INDEX","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","Jan","Feb","Mar","gsheetInstance","GsheetUtilImpl","currentSheet","initialized","init","reject","useServiceAccountAuth","client_email","private_key","loadInfo","getSpreadSheet","getSheetByTitleAsJson","sheetTitle","sheetObj","getSheetByTitle","headerValues","colCount","columnCount","j","getCell","push","rowCount","allValues","head","formattedValue","some","_this$appConfig$doc","sheetsByTitle","sheetId","loadCells","getSheet","sheetsById","appendSheet","row","addRow","appendRows","rows","addRows","getSheetRow","getRows","limit","offset","getRow","getColumn","col","result","len","getColumnWithSheet","getSheetColumn","getSheetCell","column","saveSheetCells","cells","saveCells","addSheet","input","saveSheetWithJSON","json","updateSheet","updateCategorySheet","Object","keys","forEach","month","monthData","categories","mIndex","replace","colIndex","monthIndex","cat","rowIndex","catIndex","saveUpdatedCells","udpateMaintenanceSheet","flats","maintIndex","maintenenceMonthIndex","flat","searchUpdateRecord","sheetName","searchColumns","updateColumnName","updateValue","recordIndex","findIndex","entries","every","_ref","columnName","recordToUpdate","save","isEmptySheet","startingRow","cell","newVal","updateSheetWithJSON","initSheet","initSuccess","initFailure","LogicalOpr","LogicalExecutor","inpQuery","run","execute","opr","or","child","nor","xor","nand","not","and","minLength","soundex","maxLength","lowercase","String","toLowerCase","results","previous","index","character","charAt","phonetics","toUpperCase","pad","join","slice","a","o","u","y","b","f","p","v","c","g","k","q","s","x","z","d","t","l","m","r","checkSoundexInText","keyword","word","checkSoundexInArray","words","QueryExecutor","fieldVal","skipSoundex","queryVal","Array","isArray","item","qval","_fieldVal$match","reg","RegExp","match","_fieldVal$match2","ColQueryExecutor","transaction","qExecutor","TransMapExecutor","catMapJson","catFieldMap","cashTransactions","ctrans","Category","category","find","colQuery","Credit","Description","Debit","MaintMapExecutor","Flat","TransCategory","loadTransactions","loadCashTransactionSuccess","loadOnlineTransactionSuccess","loadCashTransactionFailure","loadOnlineTransactionFailure","updateMonthlySplit","updateMonthlyMaintenanceSplit","filterTransactions","filter","trim","doMonthlyCatSplit","monthlySplit","dispatch","datum","date","_datum$Debit","isDebit","amount","parseFloat","catWithAmount","splitCat","replacedDate","updateMonthlyCat","CategorizeCash","useSelector","useDispatch","gsheetUtil","maintMapJson","fetchTransactions","sheetData","useMemo","_Fragment","CircularProgress","Table","TableHead","TableRow","TableCell","header","TableBody","CategorizeOnline","fetchOnlineTransactions","Categorizer","setMessage","setType","transData","initializeGoogleSheet","splitMonthly","splitMonthlyMaintenance","filteredTransData","saveCategorized","saveMaitenenceSplit","activeStep","setActiveStep","steps","isStepOptional","isCompletedStep","handleBack","handleSkip","handleNext","Alert","severity","Stepper","stepProps","labelProps","optional","Typography","variant","completed","Step","StepLabel","JsonView","style","defaultStyles","Categorize","parseExpenseInfo","expenseTypes","values","description","dates","amounts","test","texts","rankMap","rank","includes","set","sortedTexts","from","sort","findTopMatchingText","PDFToImagesConverter","pdfDataUriToCanvas","pdfBlobUrl","iframe","document","getElementById","onload","_iframe$contentWindow","iframeDocument","contentWindow","html2canvas","toDataURL","previewImage","setAttribute","convert","url","existingPdfBytes","fetch","arrayBuffer","pdfDoc","PDFDocument","load","newPdf","create","firstPage","copyPages","dict","node","xObject","PDFName","of","extractedImages","_xObj$dict$get","ref","xObj","context","lookup","_xObj$dict$get2","_xObj$dict$get3","_xObj$dict$get4","lookupMaybe","dataStart","PDF_KEYS","bitsPerComponent","colorSpace","extension","path","properties","base64ToUint8Array","base64","binaryString","uint8Array","uint8ArrayToBase64","binary","fromCharCode","btoa","uint8ArrayToBase64Image","dataURItoBlobURL","base64Data","exec","mimeType","byteCharacters","byteNumbers","URL","createObjectURL","Ollama","getVisionRequestBody","requestOptions","method","redirect","getCategory","categoryList","getCatRequestBody","messages","role","content","dataURIs","urlToBase64","startsWith","converter","pdfImages","base64Images","all","img","options","seed","cash","required","images","imageUrl","ok","statusText","blobToBase64","reader","FileReader","readAsDataURL","onloadend","onerror","Gemini","chat","inProgress","initProm","API_KEY","GoogleGenerativeAI","getGenerativeModel","safetySettings","HarmCategory","HARM_CATEGORY_HARASSMENT","threshold","HarmBlockThreshold","BLOCK_MEDIUM_AND_ABOVE","HARM_CATEGORY_HATE_SPEECH","HARM_CATEGORY_SEXUALLY_EXPLICIT","HARM_CATEGORY_DANGEROUS_CONTENT","startChat","generationConfig","topK","topP","maxOutputTokens","initChat","msg","sendMessage","extractData","parsedString","parse","Amount","isChequeIssued","IsChequeIssued","USE_OLLAMA","fetchFiles","setFilesList","saveOnlineTransactionWithBill","debit","billURL","searchUpdateOnlineTransWithBills","getDriveFileURL","saveCashTransSheet","title","getDataInSheetFormat","selectedBill","_data$date","_data$description","_data$amount","Total","Bill","setCategory","longDescription","BillDataCache","extractBillData","fileName","bill","parsedFormData","fileUrl","getFunc","bind","getOCRVision","visionHandler","handleOllamaResponse","handleOCRSpaceResponse","getVisionRetry","parsedResp","_response$data","_response$data$Parsed","parsedText","RETRY_COUNT","resp","BillRow","previewBill","expenseCategories","callback","showLoader","setShowLoader","setFormData","formCompleted","setFormCompleted","isCash","errorData","setErrorData","transactionType","event","prev","handleSubmit","formDataClone","onMouseEnter","OpenInNewIcon","Tooltip","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","closeOnSelect","dayjs","TextField","fullWidth","Select","MenuItem","Switch","checked","SyncIcon","SendIcon","LinearProgress","BillTransactionTable","handleSplit","anchorEl","setAnchorEl","setPreviewBill","currentTarget","Boolean","size","TableContainer","component","Paper","Popover","onClose","onMouseLeave","anchorOrigin","vertical","horizontal","ExpenseForm","handleClose","setData","scroll","maxWidth","FormControl","margin","RadioGroup","FormControlLabel","control","Radio","FormHelperText","placeholder","helperText","InputLabel","FolderGrid","folders","handleClick","sortedFolders","arr","monthMap","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC","JAN","FEB","MAR","customSortByMonth","Grid","container","spacing","folder","xs","width","height","cursor","padding","textAlign","TransSheet","sheetIntialized","sheets","has","getExpenseCategories","expList","filteredExpList","expense","parseMonthlySheet","toDate","Desc","ChqNo","Balance","Type","getMonthData","monthSheet","pushSheetData","transCompare","fileData","mergeSheetData","sData","sheetTrans","setMonthData","fetchedData","NewBills","setMonth","fileList","openDialog","setOpenDialog","setSelectedBill","selectedFolder","setSelectedFolder","handleFolderClick","folderName","fileInfo","billId","selectedBillId","finalData","setExpenseCategories","transSheet","expCat","billsObj","ArrowBackIcon","BillTable","FileUpload","setErrorMsg","onUpload","fileObject","onError","errMsg","FilePicker","extensions","XLS_TRANS_KEY_PREFIX","xLSTransKeys","CSV_START_STR","CsvTransKeys","fileParserUtil","parseCsvFile","lines","headerLineIndex","line","records","record","parseCsvTransactions","readAsBinaryString","parseXLS","workBook","XLSX","read","worksheet","Sheets","SheetNames","utils","sheet_to_json","parseTransactions","parseAmount","replaceAll","getWorkingColumnKeyFromArray","cols","dateKey","balanceKey","descKey","chqNoKey","FilePreview","xlsData","months","monthList","monthsArray","selMonth","setSelMonth","useContext","filteredRows","stickyHeader","align","FileSave","setMsg","saveSheet","OnlineTransactionParser","setFileName","bankTransactions","setBankTransactions","parseDataFile","parserFunction","reverse","getStepContent","step","skipped","setSkipped","Set","isStepSkipped","newSkipped","delete","prevActiveStep","handleReset","OnlineTransactions","EncryptKeyComponent","setKey","encryptedValue","setEncryptedValue","decryptedValue","setDecryptedValue","copyMessage","setCopyMessage","newKey","eKey","encrypt","ekey","handleCopy","navigator","clipboard","writeText","setTimeout","decryptLabel","CheckCircleRoundedIcon","Container","gutterBottom","Box","marginTop","InputProps","readOnly","Key","KeyGen","AppRoutes","Routes","Route","element","BillParser","App","secretSuccess","setSecretSuccess","collapsed","setCollapsed","Provider","BrowserRouter","Sidebar","Menu","icon","HomeIcon","Link","to","CategoryIcon","ReceiptIcon","HandymanIcon","KeyboardDoubleArrowLeftIcon","KeyboardDoubleArrowRightIcon","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.02de6468.chunk.js","sourcesContent":["import { FlatCategory } from '../../../utils/flat-category';\nimport { TransCategory } from '../../../utils/trans-category';\n\nexport enum TransActions {\n    LOAD_TRANS = 'LOAD_TRANS',\n    LOAD_CASH_TRANS_SUCCESS = 'LOAD_CASH_TRANS_SUCCESS',\n    LOAD_ONLINE_TRANS_SUCCESS = 'LOAD_ONLINE_TRANS_SUCCESS',\n    LOAD_CASH_TRANS_FAILURE = 'LOAD_CASH_TRANS_FAILURE',\n    LOAD_ONLINE_TRANS_FAILURE = 'LOAD_ONLINE_TRANS_FAILURE',\n    UPDATE_MONTHLY_SPLIT = 'UPDATE_MONTHLY_SPLIT',\n    RESET_MONTHLY_SPLIT = 'RESET_MONTHLY_SPLIT',\n    UPDATE_MONTHLY_MAINT_SPLIT = 'UPDATE_MONTHLY_MAINT_SPLIT',\n    RESET_MONTHLY_MAINT_SPLIT = 'RESET_MONTHLY_MAINT_SPLIT',\n    RESET_TRANS = 'RESET_TRANS',\n}\nexport type MonthlyCatSplit = {\n    [month: string]: {\n        [category: string]: number;\n    };\n};\n\nexport type MonthlyMaintSplit = {\n    [month: string]: {\n        [category: string]: number;\n    };\n};\nexport type TransData = {\n    loading: boolean;\n    cashTransData?: { [type: string]: any }[];\n    onlineTransData?: { [type: string]: any }[];\n    monthlyCatSplit?: MonthlyCatSplit;\n    monthlyMaintSplit?: MonthlyMaintSplit;\n    error: string;\n}\n\nexport type TransactionType = {\n    Date: string | null;\n    Description: string;\n    'Cheque No'?: string | null;\n    Debit: number | null;\n    Credit: number | null;\n    Total: number;\n    Category?: TransCategory;\n    Flat?: FlatCategory;\n    Bill?: string;\n};\n","import { TransData, TransActions } from './trans-types';\n\nconst initValues: TransData = {\n    loading: false,\n    cashTransData: undefined,\n    onlineTransData: undefined,\n    monthlyCatSplit: undefined,\n    error: '',\n};\n\nconst transReducder = (state = initValues, action: { type: TransActions, payload: any}) => {\n    switch (action.type) {\n    case TransActions.LOAD_TRANS:\n        return {\n            ...state,\n            loading: true,\n        };\n    case TransActions.LOAD_CASH_TRANS_SUCCESS:\n        return {\n            ...state,\n            loading: false,\n            cashTransData: action.payload as any,\n            error: '',\n        };\n    case TransActions.LOAD_ONLINE_TRANS_SUCCESS:\n        return {\n            ...state,\n            loading: false,\n            onlineTransData: action.payload as any,\n            error: '',\n        };\n    case TransActions.LOAD_CASH_TRANS_FAILURE:\n        return {\n            ...state,\n            loading: false,\n            cashTransData: undefined,\n            error: action.payload as any,\n        };\n    case TransActions.LOAD_ONLINE_TRANS_FAILURE:\n        return {\n            ...state,\n            loading: false,\n            onlineTransData: undefined,\n            error: action.payload as any,\n        };\n    case TransActions.UPDATE_MONTHLY_SPLIT:\n        return {\n            ...state,\n            monthlyCatSplit: action.payload,\n            loading: false,\n        };\n    case TransActions.RESET_MONTHLY_SPLIT:\n        return {\n            ...state,\n            monthlyCatSplit: undefined,\n        };\n    case TransActions.UPDATE_MONTHLY_MAINT_SPLIT:\n        return {\n            ...state,\n            monthlyMaintSplit: action.payload,\n            loading: false,\n        };\n    case TransActions.RESET_MONTHLY_MAINT_SPLIT:\n        return {\n            ...state,\n            monthlyMaintSplit: undefined,\n        };\n    case TransActions.RESET_TRANS:\n        return initValues;\n    default:\n        return state;\n    }\n};\n\nexport default transReducder;\n","/* eslint-disable max-len */\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport React from 'react';\nimport CryptoJS from 'crypto-js';\nimport moment from 'moment';\nimport { ApplicationConfig, AppData, CatItem } from './service-types';\n\nexport const setCredentials = (secret: string = '') => {\n    const out = {\n        res: false,\n        error: '',\n    };\n    if (secret) {\n        const emailB = CryptoJS.AES.decrypt(appConfig.ENC_CLIENT_EMAIL, secret);\n        const pkB = CryptoJS.AES.decrypt(appConfig.ENC_PRIVATE_KEY, secret);\n        const chatGPTPK = CryptoJS.AES.decrypt(appConfig.ENC_CHAT_GPT_KEY, secret);\n        const googleAPIKey = CryptoJS.AES.decrypt(appConfig.ENC_GOOGLE_API_KEY, secret);\n        const geminiKey = CryptoJS.AES.decrypt(appConfig.ENC_GEMINI_KEY, secret);\n        const ocrSpaceKey = CryptoJS.AES.decrypt(appConfig.OCR_SPACE_KEY, secret);\n        try {\n            appConfig.clientEmail = emailB.toString(CryptoJS.enc.Utf8);\n            appConfig.privateKey = pkB.toString(CryptoJS.enc.Utf8);\n            appConfig.googleAPIKey = googleAPIKey.toString(CryptoJS.enc.Utf8);\n            appConfig.secret = secret;\n            appConfig.chatGPTPrivateKey = chatGPTPK.toString(CryptoJS.enc.Utf8);\n            appConfig.geminiKey = geminiKey.toString(CryptoJS.enc.Utf8);\n            appConfig.ocrSpaceKey = ocrSpaceKey.toString(CryptoJS.enc.Utf8);\n            sessionStorage.setItem('session-id', secret);\n            out.res = true;\n        } catch (e) {\n            appConfig.secret = '';\n            out.res = false;\n            out.error = 'Invalid Secret Provided';\n        }\n    } else {\n        appConfig.secret = '';\n        out.res = false;\n        out.error = 'Empty Secret Set';\n    }\n    return out;\n};\n\nexport const encrypt = (key: string, secret?: string) => {\n    const encrypted = CryptoJS.AES.encrypt(key, secret ?? appConfig.secret).toString();\n    return encrypted;\n};\n\nexport const decrypt = (ekey: string, secret?: string) => {\n    const decrypted = CryptoJS.AES.decrypt(ekey, secret ?? appConfig.secret);\n    return decrypted.toString(CryptoJS.enc.Utf8);\n};\n\nconst flatNumbers = [\n    '001', '002', '003', '004', '005', '007', '008', '009', '010', '011', '012',\n    '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112',\n    '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212',\n    '301', '302', '303', '304', '305', '306', '307', '308', '309', '310', '311', '312',\n    '401', '402', '403', '404', '405', '406', '407', '408', '409', '410', '411', '412',\n];\n\nconst transCategories: CatItem[] = [\n    {\n        key: 'maintenance',\n        label: 'Maintenance',\n        children: flatNumbers.map((val) => ({\n            key: `maintenance-${val}`,\n            label: val,\n        })),\n    },\n    {\n        key: 'corpus',\n        label: 'Corpus Fund',\n        children: flatNumbers.map((val) => ({\n            key: `corpus-${val}`,\n            label: val,\n        })),\n    },\n    {\n        key: 'monthly',\n        label: 'Monthly Expenses',\n        children: [],\n    },\n    {\n        key: 'others',\n        label: 'Others',\n        children: [\n            {\n                key: 'fine',\n                label: 'Fine',\n            },\n            {\n                key: 'extra',\n                label: 'Other Income',\n            },\n            {\n                key: 'account-transfer',\n                label: 'FD Deposit',\n            },\n            {\n                key: 'tenant-deposit',\n                label: 'Tenant Deposit',\n            },\n            {\n                key: 'rd-deposit',\n                label: 'Deposit to RD account',\n            },\n        ],\n    },\n];\n\nconst appData: AppData = {\n    transCategories,\n    transactionFinYear: moment().format('YY'),\n    transSheetMonth: '',\n    transactions: [],\n};\n\nexport const setSheetMonth = (sheetTitle: string) => {\n    appData.transSheetMonth = sheetTitle;\n};\nconst SPREADSHEET_ID = '1aumDbLSTH31n1MFpguM0-THWslbR3ZPNCXSlI72WuBo';\nconst appConfig: ApplicationConfig = {\n    secret: sessionStorage.getItem('session-id') || '',\n    SPREADSHEET_ID,\n    ENC_CLIENT_EMAIL: 'U2FsdGVkX19lrOkAqkI1YRZkdHSjXZc+dtJNUzOhSlqaydB6Gxi4lm9MpS7+2/W7OtInfOCmh739buu1z1jzT/jJrAeRX2+hKkxc+3qsduw=',\n    ENC_PRIVATE_KEY: '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',\n    ENC_GOOGLE_API_KEY: 'U2FsdGVkX1+z10t9/VGkdh+xgB9JO7TwDIGpiW5ivAoQrmKV9c77947cJH49fTgzZcc5DSaLNH1jlCpIiLbSuw==',\n    ENC_CHAT_GPT_KEY: 'U2FsdGVkX19CE/c8Tng+qxPTykma92uBwnVA8hVNUPhl5desREv8awMfLxjN2ZnKC23rEB6XcYTSzVfgEwgEqQPZuhXq3Ef0cng56m8DqyI=',\n    ENC_GEMINI_KEY: 'U2FsdGVkX1+ja6BvyIZ4xRS/wHKtCFsD22qQ0wfw/U30gL6c2FfqhrQyqt25ch1C77vdq1A7rlLZ0RKBXXjmaQ==',\n    OCR_SPACE_KEY: 'U2FsdGVkX1/Je2pGMUWIY8Mnid+Xulw55FuCkiYcNvU=',\n    doc: new GoogleSpreadsheet(SPREADSHEET_ID),\n    appData,\n};\n\nexport const getConfig = () => appConfig;\n\nif (appConfig.secret) {\n    setCredentials(appConfig.secret);\n}\nconst AppContext = React.createContext(appConfig);\n\n// eslint-disable-next-line no-shadow\nexport enum TransactionFilters {\n    all = 'All Transaction',\n    mapped = 'Only Mapped',\n    unmapped = 'Only Unmapped',\n}\n\nexport default AppContext;\n","import { ApplicationConfig } from '../../service-types';\n\nenum SHEET_ACTION_TYPES {\n    INIT = 'INIT',\n    INIT_SUCCESS = 'GET_SHEET_INFO',\n    INIT_FAILURE = 'GET_SHEET_INFO_FAILURE',\n    SET_SHEET_INFO = 'SET_SHEET_INFO',\n}\n\nexport type SheetInfo = Map<string, { [key: string]: any }[]>;\n\nexport type GoogleSheet = {\n    initializing?: boolean;\n    initError: string;\n    sheetConfig: ApplicationConfig;\n    sheetInfo: SheetInfo;\n};\n\nexport default SHEET_ACTION_TYPES;\n","import { getConfig } from '../..';\nimport SHEET_ACTION_TYPES, { GoogleSheet } from './sheet-types';\n\nconst initialValue: GoogleSheet = {\n    initError: '',\n    sheetConfig: getConfig(),\n    sheetInfo: new Map(),\n};\nconst sheetReducer = (state: GoogleSheet = initialValue, action: { type: SHEET_ACTION_TYPES, payload: any}) => {\n    switch (action.type) {\n    case SHEET_ACTION_TYPES.INIT:\n        return {\n            ...state,\n            initializing: true,\n        };\n    case SHEET_ACTION_TYPES.INIT_SUCCESS:\n        return {\n            ...state,\n            initializing: false,\n            appConfig: action.payload,\n        };\n    case SHEET_ACTION_TYPES.INIT_FAILURE:\n        return {\n            ...state,\n            initializing: false,\n            initError: action.payload,\n        };\n    case SHEET_ACTION_TYPES.SET_SHEET_INFO:\n        return {\n            ...state,\n            sheetInfo: action.payload,\n        };\n    default:\n        return state;\n    }\n};\n\nexport default sheetReducer;\n","import { LayoutType } from '../../../lib/layout/layout-types';\n\nexport enum BillsActions {\n    INIT = 'INIT',\n    SUCCESS = 'SUCCESS',\n    FAILURE = 'FAILURE',\n    SET_CONFIG = 'SET_CONFIG',\n    ADD_EVENTS = 'ADD_EVENTS',\n}\n\nexport type BillsConfig = {\n    encBotId: string;\n    listURL: string;\n    fetchURL: string;\n    downloadURL: string;\n    updateURL: string;\n};\n\nexport type BillEventType = 'wizard:next' | 'wizard:back' | 'field:blur';\n\nexport type BillEvent = {\n    id: string;\n    type: BillEventType;\n    layout: LayoutType;\n    state?: 'pending' | 'processing' | 'processed',\n    payload?: any;\n}\nexport type BillsData = {\n    isLoading: boolean;\n    data: any;\n    config: BillsConfig;\n    layoutData?: LayoutType;\n    error?: any;\n    events: BillEvent[];\n};\n","/* eslint-disable max-len */\nimport { BillsData, BillsActions } from './bills-types';\n\nconst initValues: BillsData = {\n    isLoading: false,\n    data: {},\n    config: {\n        encBotId: 'U2FsdGVkX1/0gDV/ibea6VfAgozs8tNyWPB0zt3iRLDsNORNjxOhmloQXZl7ywLjxeQl4Bmxe3iZ7RLdUxi+BA==',\n        listURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/get.php',\n        fetchURL: 'https://api.telegram.org/bot{{botId}}/getFile?file_id={{fileId}}',\n        downloadURL: 'https://api.telegram.org/file/bot{{botId}}/photos/{{filePath}}',\n        updateURL: 'https://state-tourniquet.000webhostapp.com/suraksha/telegram/processed.php?id={{recordId}}',\n    },\n    layoutData: undefined,\n    events: [],\n};\n\nconst billsReducer = (state = initValues, action: { type: BillsActions, payload: any}): BillsData => {\n    switch (action.type) {\n    case BillsActions.INIT:\n        return {\n            ...state,\n            isLoading: true,\n            layoutData: action.payload,\n        };\n    case BillsActions.SUCCESS:\n        return {\n            ...state,\n            isLoading: false,\n            data: action.payload,\n            error: undefined,\n        };\n    case BillsActions.FAILURE:\n        return {\n            ...state,\n            isLoading: false,\n            data: undefined,\n            error: action.payload,\n        };\n    case BillsActions.SET_CONFIG:\n        return {\n            ...state,\n            config: action.payload,\n        };\n    case BillsActions.ADD_EVENTS:\n        return {\n            ...state,\n            events: [...state.events, action.payload],\n        };\n    default:\n        return state;\n    }\n};\n\nexport default billsReducer;\n","import { combineReducers } from 'redux';\nimport transReducder from './transactions/trans-reducer';\nimport sheetReducer from './google-sheet/sheet-reducer';\nimport billsReducer from './bills/bills-reducer';\n\nconst rootReducer = combineReducers({\n    sheet: sheetReducer,\n    trans: transReducder,\n    bills: billsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport Thunk from 'redux-thunk';\nimport rootReducer from './root-reducer';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(Thunk)));\n\nexport default store;\n","import React, { useCallback } from 'react';\nimport {\n    Dialog, DialogTitle, DialogContent, DialogContentText, Input, DialogActions, Button,\n} from '@mui/material';\n\nexport type SecretDialogProps = {\n    errorMsg?: string;\n    handleSecret: (secret: string) => void;\n}\nexport default function SecretDialog(props: SecretDialogProps) {\n    const [open, setOpen] = React.useState(true);\n    const [secret, setSecret] = React.useState('');\n    const handleOk = useCallback(() => {\n        // setOpen(false);\n        props.handleSecret(secret);\n    }, [props, secret]);\n    const handleChange = useCallback((e: any) => {\n        setSecret(e.target.value);\n    }, []);\n    const handleEnter = useCallback((e: any) => {\n        const ENTER_KEYCODE = 13;\n        const keyCode = e.keyCode ? e.keyCode : e.which;\n        if (keyCode === ENTER_KEYCODE) {\n            props.handleSecret(secret);\n        }\n    }, [props, secret]);\n    return (\n        <Dialog\n            open={open}\n            keepMounted\n            aria-labelledby=\"Secret Key\"\n            aria-describedby=\"Enter your secret key\"\n        >\n            <DialogTitle id=\"alert-dialog-slide-title\">Enter the secret key!!!</DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-slide-description\">\n                    Check with other committee members, if secret key is not known.\n                </DialogContentText>\n                <Input type=\"password\" value={secret} onChange={handleChange} onKeyPress={handleEnter} />\n                <div className=\"error\">{props.errorMsg}</div>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleOk} disabled={!secret} color=\"primary\">\n                    OK\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import axios from 'axios';\nimport jwt from 'jsonwebtoken';\nimport { uuid } from 'uuidv4';\nimport { getConfig } from '..';\n\nexport const generateTokenAssertion = async (expiresIn = Math.floor(Date.now() / 1000 + 3600)) => {\n    const email = '';\n    const { clientEmail: clientId, privateKey } = getConfig();\n    const claims = {\n        iss: clientId,\n        sub: email,\n        aud: 'https://www.googleapis.com/oauth2/v4/token',\n        scope: 'https://www.googleapis.com/auth/drive',\n        exp: expiresIn,\n        iat: Math.floor(Date.now() / 1000),\n        jti: uuid(),\n    };\n\n    const token = jwt.sign(claims, privateKey || '', {\n        algorithm: 'RS256',\n    });\n\n    return token;\n};\nexport const generateAuthToken = async () => {\n    const { clientEmail: clientId } = getConfig();\n    const tokenAssertion = await generateTokenAssertion();\n    const url = 'https://www.googleapis.com/oauth2/v4/token';\n    const body = {\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        client_id: clientId,\n        assertion: tokenAssertion,\n    };\n\n    const response = await axios.post(url, body);\n\n    if (response.status === 200) {\n        return response.data.access_token;\n    }\n    throw new Error(response.data);\n};\n\nexport default { generateToken: generateAuthToken, generateTokenAssertion };\n","import axios from 'axios';\nimport { getConfig } from '..';\nimport { generateAuthToken } from './google-token';\n\nexport const VERIFIED_FILE_PREFIX = 'VERIFIED_';\nconst BILLS_FOLDER_ID = '1-6owJyxGQSwRKxcJyMI3NXY4v-APeBui'; // bills directory\n\nexport async function fetchFilesFromFolder(folderId: string): Promise<any[]> {\n    const { googleAPIKey: apiKey } = getConfig();\n    const folderIdFinal = folderId || BILLS_FOLDER_ID;\n    // eslint-disable-next-line max-len\n    const query = encodeURI(`'${folderIdFinal}' in parents and (mimeType = 'image/jpeg' or mimeType = 'image/png' or mimeType = 'application/pdf' or mimeType = 'application/vnd.google-apps.folder')`);\n    try {\n        const response = await axios.get(\n            `https://www.googleapis.com/drive/v3/files?q=${query}&key=${apiKey}`,\n        );\n\n        const { files } = response.data;\n        console.log('Fetched files:', files);\n        return files;\n    } catch (error: any) {\n        console.error('Error fetching files:', error?.message || error);\n    }\n    return [];\n}\n\nexport async function copyFileAsDoc(fileId: string): Promise<any> {\n    const { googleAPIKey: apiKey } = getConfig();\n    try {\n        const response = await axios.post(\n            `https://www.googleapis.com/drive/v3/files/${fileId}/copy?key=${apiKey}`,\n            {\n                convert: true,\n                ocr: true,\n            },\n        );\n        console.log('Copied File:', response);\n        return response;\n    } catch (error: any) {\n        console.error('Error fetching files:', error?.message || error);\n    }\n    return {};\n}\n\nexport const moveFile = async (fileId: string, toDirectoryId: string) => {\n    try {\n        const authToken = await generateAuthToken();\n        const response = await axios.patch(\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\n            {\n                parents: toDirectoryId,\n            },\n            {\n                headers: {\n                    Authorization: `Bearer ${authToken}`,\n                    'Content-Type': 'application/json',\n                },\n            },\n        );\n\n        console.log('File moved successfully:', response.data);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch (error) {\n        console.error('Error occurred while moving the file:', error);\n    }\n    return null;\n};\n\nexport const renameFile = async (fileId: string, name: string) => {\n    try {\n        const authToken = await generateAuthToken();\n        const response = await axios.patch(\n            `https://www.googleapis.com/drive/v3/files/${fileId}`,\n            {\n                name: `${VERIFIED_FILE_PREFIX}${name}`,\n            },\n            {\n                headers: {\n                    Authorization: `Bearer ${authToken}`,\n                    'Content-Type': 'application/json',\n                },\n            },\n        );\n\n        console.log('File moved successfully:', response.data);\n        if (response.status === 200) {\n            return response.data;\n        }\n    } catch (error) {\n        console.error('Error occurred while moving the file:', error);\n    }\n    return null;\n};\n\nexport default { fetchFilesFromFolder, moveFile };\n","/* eslint-disable max-len */\nimport axios from 'axios';\nimport axiosRetry from 'axios-retry';\nimport { getConfig } from '..';\nimport { copyFileAsDoc } from '../googleapis/drive-util';\n\nconst getOCRSpaceKey = () => getConfig().ocrSpaceKey || '';\nconst OCR_SPACE_API_URL = 'https://api.ocr.space/parse/image';\nconst OCR_SPACE_ENGINE = '5';\n\nconst getData = (file: File) => {\n    const formData = new FormData();\n    formData.append('base64Image', file);\n    formData.append('isTable', 'true');\n    formData.append('OCREngine', OCR_SPACE_ENGINE);\n    axios\n        .post(OCR_SPACE_API_URL, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                apikey: getOCRSpaceKey(),\n            },\n        })\n        .then((response) => {\n            console.log(response.data);\n        }).catch((error) => {\n            console.error(error);\n        });\n};\nexport const getDriveVision = (fileId: string) => {\n    copyFileAsDoc(fileId);\n};\n\nexport const getVision = (imageURL: string) => {\n    const formData = new FormData();\n    formData.append('url', imageURL);\n    formData.append('language', 'eng');\n    // formData.append('isOverlayRequired', 'true');\n    // formData.append('fileType', 'JPG');\n    formData.append('isTable', 'true');\n    formData.append('OCREngine', OCR_SPACE_ENGINE);\n    formData.append('filetype', '.Auto');\n    axiosRetry(axios, { retries: 3 });\n    return axios\n        .post(OCR_SPACE_API_URL, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                apikey: getOCRSpaceKey(),\n            },\n        }).catch((error) => {\n            console.error(error);\n        });\n};\nfunction dataURItoBlob(dataURI: string) {\n    // convert base64/URLEncoded data component to raw binary data held in a string\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0) {\n        byteString = atob(dataURI.split(',')[1]);\n    } else {\n        byteString = unescape(dataURI.split(',')[1]);\n    }\n    // separate out the mime component\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to a typed array\n    const ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i += 1) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ia], { type: mimeString });\n}\nexport const getDatafromDataURI = async (dataURI: string) => {\n    const blob = dataURItoBlob(dataURI);\n    const file = new File([blob], 'canvasImage.jpg', { type: 'image/jpeg' });\n    const formData = new FormData();\n    formData.append('base64Image', file);\n    const response = await axios\n        .post(OCR_SPACE_API_URL, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n                apikey: getOCRSpaceKey(),\n            },\n        });\n    return response;\n};\n\nexport default getData;\n","import { Configuration, OpenAIApi } from 'openai';\nimport { getConfig } from '..';\nimport { ApplicationConfig } from '../service-types';\n\nexport class ChatGPTService {\n    public chatGPTPrivateKey: string = '';\n    public openAI: OpenAIApi | undefined;\n    private appConfig: ApplicationConfig;\n\n    public constructor() {\n        this.appConfig = getConfig();\n        if (this.appConfig.chatGPTPrivateKey) {\n            this.chatGPTPrivateKey = this.appConfig.chatGPTPrivateKey;\n            const chatGPTConfig = new Configuration({\n                organization: 'org-wfOq673LgvxydlfXwY3Fmcvm',\n                apiKey: this.chatGPTPrivateKey,\n            });\n            this.openAI = new OpenAIApi(chatGPTConfig);\n        }\n    }\n\n    public async getCompleted(text: string) {\n        if (this.openAI) {\n            return this.openAI.createCompletion({\n                model: 'text-davinci-003',\n                prompt: 'Say this is a test',\n                max_tokens: 7,\n                temperature: 0,\n                top_p: 1,\n                n: 1,\n                stream: false,\n                logprobs: null,\n                stop: '\\n',\n            },\n            );\n        }\n        return Promise.resolve('');\n    }\n\n    static instance: ChatGPTService;\n\n    static getInstance() {\n        if (!ChatGPTService.instance) {\n            ChatGPTService.instance = new ChatGPTService();\n        }\n        return ChatGPTService.instance;\n    }\n}\n\nexport default ChatGPTService;\n","import { IconButton } from '@mui/material';\nimport OpenInFullIcon from '@mui/icons-material/OpenInFull';\nimport CloseFullscreenIcon from '@mui/icons-material/CloseFullscreen';\nimport React, { useRef, useState, useCallback, useEffect } from 'react';\nimport './cash-trans.css';\nimport { getDatafromDataURI } from '../../services/ocr';\nimport ChatGPTService from '../../services/chatgpt';\n\nfunction dataURItoBlob(dataURI: string) {\n    const binary = atob(dataURI.split(',')[1]);\n    const array = [];\n    for (let i = 0; i < binary.length; i += 1) {\n        array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], { type: 'image/jpeg' });\n}\nfunction CashTransactions() {\n    const camera = useRef();\n    const [image, setImage] = useState<string>();\n    const [fullscreen, setFullscreen] = useState(true);\n    const errorMessages = {};\n    const takePhoto = useCallback(() => {\n        const cameraRef: { takePhoto?: Function } = camera.current || {};\n        if (!image && cameraRef && cameraRef.takePhoto) {\n            setImage(cameraRef.takePhoto());\n            setFullscreen(false);\n        } else {\n            setImage(undefined);\n        }\n    }, [camera, image]);\n    const toggleFullScreen = useCallback(() => {\n        setFullscreen((status) => !status);\n    }, []);\n    const parentClassName = fullscreen ? 'cash-trans block-page' : 'cash-trans';\n    const [imageData, setImageData] = useState();\n    useEffect(() => {\n        if (image) {\n            getDatafromDataURI(image).then(async (response: any) => {\n                const { ParsedText } = response.data.ParsedResults[0] || {};\n                if (ParsedText) {\n                    const parsedData = await ChatGPTService.getInstance().getCompleted(ParsedText);\n                    setImageData(parsedData as any);\n                }\n            });\n        }\n    }, [image]);\n    return (\n        <div className={parentClassName}>\n            <div>Handle Cash Transactions</div>\n            <pre>{JSON.stringify(imageData, undefined, 4)}</pre>\n            {!image && (\n                <IconButton\n                    className=\"close-camera\"\n                    aria-label=\"Take Photo\"\n                    onClick={toggleFullScreen}\n                >\n                    {fullscreen ? <CloseFullscreenIcon /> : <OpenInFullIcon />}\n                </IconButton>\n            )}\n            {/* {!image && <Camera ref={camera} facingMode=\"environment\" errorMessages={errorMessages} />} */}\n            <IconButton\n                className=\"camera-click\"\n                aria-label=\"Take Photo\"\n                onClick={takePhoto}\n            >\n                <img src=\"/images/circular-camera.png\" alt=\"Take Pic\" />\n            </IconButton>\n            {/* {image && <img className=\"captured-image\" src={image} alt=\"Uploaded Bill\" />} */}\n        </div>\n    );\n}\n\nexport default CashTransactions;\n","import React from 'react';\nimport CashTransactions from '../components/cash';\n\nconst Cash: React.FC = () => (\n    <CashTransactions />\n);\n\nexport default Cash;\n","const CAT_INDEX: { [month: string]: number } = {\n    'Audit Fees': 1,\n    BWSSB: 2,\n    Diesel: 3,\n    Bescom: 4,\n    'House Keeping Salary': 5,\n    Security: 6,\n    'Garden Maintenance': 7,\n    'Garbage Collection Vendor / BBMP': 8,\n    'Borewell And Motor Maintenance': 9,\n    'Annual Bonus': 10,\n    'Lift Maintenance': 11,\n    'HK Items Purchased': 12,\n    'Health Club Maintenance': 13,\n    'Electrical / Plumbing Repairs': 14,\n    'Apartment repairs related': 15,\n    'Apartment Safety': 16,\n    'CCTV / Intercomm': 17,\n    'Misc expenses': 18,\n    'Apartment developments': 19,\n    'Apartment Work By Security and Others': 20,\n    'Septic Tank Repairs / Cleaning': 21,\n    'Water Tanks Cleaning': 22,\n    'Generator Maintenance and Repair': 23,\n    'Savings Bank SMS Charges/Cheque book': 24,\n    'Festival/Holiday Celebration': 25,\n    'Drinking Water for Employees': 26,\n    'BAF Subscription Charges': 27,\n    'Maintenance Collection': 30,\n    'Income Tax Refund': 31,\n    'Other Income': 32,\n    'Interest on account': 33,\n    'Fine / Extra Payment Received': 34,\n    'Corpus Fund': 35,\n    'Tenant Deposit from the Owners': 36,\n    'FD Deposit': 37,\n    'Deposit to RD account': 38,\n};\n\nexport default CAT_INDEX;\n","const MONTH_INDEX: { [month: string]: number } = {\n    Apr: 2,\n    May: 3,\n    Jun: 4,\n    Jul: 5,\n    Aug: 6,\n    Sep: 7,\n    Oct: 8,\n    Nov: 9,\n    Dec: 10,\n    Jan: 11,\n    Feb: 12,\n    Mar: 13,\n};\n\nexport default MONTH_INDEX;\n","export default {\n    '001': 1,\n    '002': 2,\n    '003': 3,\n    '004': 4,\n    '005': 5,\n    '007': 6,\n    '008': 7,\n    '009': 8,\n    '010': 9,\n    '011': 10,\n    '012': 11,\n    101: 12,\n    102: 13,\n    103: 14,\n    104: 15,\n    105: 16,\n    106: 17,\n    107: 18,\n    108: 19,\n    109: 20,\n    110: 21,\n    111: 22,\n    112: 23,\n    201: 24,\n    202: 25,\n    203: 26,\n    204: 27,\n    205: 28,\n    206: 29,\n    207: 30,\n    208: 31,\n    209: 32,\n    210: 33,\n    211: 34,\n    212: 35,\n    301: 36,\n    302: 37,\n    303: 38,\n    304: 39,\n    305: 40,\n    306: 41,\n    307: 42,\n    308: 43,\n    309: 44,\n    310: 45,\n    311: 46,\n    312: 47,\n    401: 48,\n    402: 49,\n    403: 50,\n    404: 51,\n    405: 52,\n    406: 53,\n    407: 54,\n    408: 55,\n    409: 56,\n    410: 57,\n    411: 58,\n    412: 59,\n} as { [month: string]: number };\n","const MONTH_INDEX: { [month: string]: number } = {\n    Apr: 2,\n    May: 3,\n    Jun: 4,\n    Jul: 5,\n    Aug: 6,\n    Sep: 7,\n    Oct: 8,\n    Nov: 9,\n    Dec: 10,\n    Jan: 11,\n    Feb: 12,\n    Mar: 13,\n};\n\nexport default MONTH_INDEX;\n","import {\n    GoogleSpreadsheet,\n    GoogleSpreadsheetCell,\n    GoogleSpreadsheetRow,\n    GoogleSpreadsheetWorksheet,\n    WorksheetBasicProperties,\n} from 'google-spreadsheet';\nimport { getConfig } from '..';\nimport catIndex from '../cat-map/cat-index';\nimport monthIndex from '../cat-map/month-index';\nimport maintIndex from '../maint-map/flat-index';\nimport maintenenceMonthIndex from '../maint-map/month-index';\nimport { ApplicationConfig } from '../service-types';\n\n// Config variables\nexport interface GSheetUtil {\n    currentSheet?: string;\n    init: () => Promise<GoogleSpreadsheet>;\n    getSpreadSheet: () => GoogleSpreadsheet | undefined;\n    getSheetByTitle: (sheetTitle: string) => Promise<GoogleSpreadsheetWorksheet>;\n    getSheetByTitleAsJson: (sheetTitle: string) => Promise<{ [key: string]: any }[]>;\n    getSheet: (sheetId: string) => Promise<GoogleSpreadsheetWorksheet>;\n    appendSheet: (sheetId: string, row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\n    append: (row: { [key: string]: string | number }) => Promise<GoogleSpreadsheetRow>;\n    appendRows: (rows: { [key: string]: string | number }[]) => Promise<void>;\n    getSheetRow: (sheetId: string, row: number) => Promise<GoogleSpreadsheetRow[]>;\n    getRow: (row: number) => Promise<GoogleSpreadsheetRow[]>;\n    getColumn: (col: number) => GoogleSpreadsheetCell[];\n    getColumnWithSheet: (sheet: GoogleSpreadsheetWorksheet, col: number) => GoogleSpreadsheetCell[];\n    getSheetColumn: (sheetId: string, col: number) => GoogleSpreadsheetCell[];\n    getSheetCell: (sheetId: string, row: number, column: number) => GoogleSpreadsheetCell;\n    getCell: (row: number, column: number) => GoogleSpreadsheetCell;\n    saveSheetCells: (sheetId: string, cells: GoogleSpreadsheetCell[]) => Promise<void>;\n    saveSheetWithJSON: (json: { [key: string]: any }[]) => Promise<void>;\n    updateCategorySheet: (json: { [month: string]: { [cat: string]: any }}) => Promise<void>;\n    udpateMaintenanceSheet: (json: { [month: string]: { [flat: string]: any }}) => Promise<void>;\n    saveCells: (cells: GoogleSpreadsheetCell[]) => Promise<void>;\n    addSheet: (input: WorksheetBasicProperties) => Promise<GoogleSpreadsheetWorksheet>;\n    updateSheetWithJSON: (json: { [key: string]: any }[], sheetTitle?: string) => Promise<void>;\n    isEmptySheet: (sheet: GoogleSpreadsheetWorksheet) => boolean;\n    searchUpdateRecord: (\n        sheetName: string,\n        searchColumns: Record<string, any>,\n        updateColumnName: string,\n        updateValue: any) => Promise<void>;\n}\n\nlet gsheetInstance: GSheetUtil;\nclass GsheetUtilImpl implements GSheetUtil {\n    public currentSheet: string = '';\n    public initialized = false;\n    private appConfig: ApplicationConfig;\n\n    public constructor() {\n        this.appConfig = getConfig();\n    }\n\n    public init() {\n        if (this.initialized) {\n            return Promise.resolve(this.appConfig.doc);\n        }\n        return new Promise<GoogleSpreadsheet>((resolve, reject) => {\n            const { doc } = this.appConfig;\n            doc.useServiceAccountAuth({\n                client_email: this.appConfig.clientEmail || '',\n                private_key: this.appConfig.privateKey || '',\n            }).then(() => {\n                doc.loadInfo().then(() => {\n                    this.initialized = true;\n                    resolve(doc);\n                }).catch((e: any) => {\n                    console.log(e);\n                });\n            }).catch((e: any) => {\n                console.log(e);\n                reject(e);\n            });\n        });\n    }\n\n    public getSpreadSheet () {\n        return this.appConfig.doc;\n    }\n\n    public async getSheetByTitleAsJson(sheetTitle: string): Promise<{ [key: string]: any; }[]> {\n        const sheetInfo: any[] = [];\n        const sheetObj = await this.getSheetByTitle(sheetTitle);\n        let headers: string[] = sheetObj.headerValues;\n        let colCount = sheetObj.columnCount;\n        if (!headers || headers.length === 0) {\n            headers = [];\n            for (let j = 0; j < colCount; j += 1) {\n                const { value } = sheetObj.getCell(0, j);\n                if (value) {\n                    headers.push(sheetObj.getCell(0, j).value.toString());\n                }\n            }\n        }\n        colCount = headers.length;\n        const { rowCount } = sheetObj;\n        for (let i = 1; i < rowCount; i += 1) {\n            const sheet: any = {};\n            const allValues: any[] = [];\n            for (let j = 0; j < colCount; j += 1) {\n                const head = headers[j];\n                const val = sheetObj.getCell(i, j).formattedValue;\n                sheet[head] = val;\n                allValues.push(val);\n            }\n            if (allValues.some((val) => val !== null)) {\n                sheetInfo.push(sheet);\n            } else {\n                break;\n            }\n        }\n        return sheetInfo;\n    }\n\n    public async getSheetByTitle(sheetTitle: string) {\n        const sheet = this.appConfig.doc?.sheetsByTitle[sheetTitle];\n        if (sheet) {\n            this.currentSheet = sheet.sheetId;\n            await sheet.loadCells();\n        }\n        return sheet;\n    }\n\n    public async getSheet(sheetId: string) {\n        this.currentSheet = sheetId;\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        await sheet.loadCells();\n        return sheet;\n    }\n\n    public appendSheet(sheetId: string, row: { [key: string]: string | number; }) {\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        return sheet.addRow(row);\n    }\n\n    public append(row: { [key: string]: string | number; }) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        return sheet.addRow(row);\n    }\n\n    public async appendRows(rows: { [key: string]: string | number; }[]) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        await sheet.addRows(rows);\n    }\n\n    public getSheetRow(sheetId: string, row: number) {\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        return sheet.getRows({\n            limit: 1,\n            offset: row,\n        });\n    }\n\n    public getRow(row: number) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        return sheet.getRows({\n            limit: 1,\n            offset: row,\n        });\n    }\n\n    public getColumn(col: number) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        const result = [];\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\n        for (let i = 0; i < len - 1; i += 1) {\n            result.push(sheet.getCell(i, col));\n        }\n        return result;\n    }\n\n    public getColumnWithSheet(sheet: GoogleSpreadsheetWorksheet, col: number) {\n        const result = [];\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\n        for (let i = 0; i < len - 1; i += 1) {\n            result.push(sheet.getCell(i, col));\n        }\n        return result;\n    }\n\n    public getSheetColumn(sheetId: string, col: number) {\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        const result = [];\n        const len = sheet.rowCount < 100 ? sheet.rowCount : 100;\n        for (let i = 0; i < len - 1; i += 1) {\n            result.push(sheet.getCell(i, col));\n        }\n        return result;\n    }\n\n    public getSheetCell(sheetId: string, row: number, column: number) {\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        return sheet.getCell(row, column);\n    }\n\n    public getCell(row: number, column: number) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        return sheet.getCell(row, column);\n    }\n\n    public saveSheetCells(sheetId: string, cells: GoogleSpreadsheetCell[]) {\n        const sheet = this.appConfig.doc.sheetsById[sheetId];\n        return sheet.saveCells(cells);\n    }\n\n    public saveCells(cells: GoogleSpreadsheetCell[]) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        return sheet.saveCells(cells);\n    }\n\n    public addSheet (input: WorksheetBasicProperties) {\n        return this.appConfig.doc.addSheet(input);\n    }\n\n    public async saveSheetWithJSON (json: { [key: string]: any; }[]) {\n        const sheet = this.appConfig.doc.sheetsById[this.currentSheet || ''];\n        await this.updateSheet(sheet, json);\n    }\n\n    public async updateCategorySheet(json: { [month: string]: { [cat: string]: any; }; }): Promise<void> {\n        const sheet = await this.getSheetByTitle('Summary');\n        await sheet.loadCells();\n        const months = Object.keys(json);\n        months.forEach((month) => {\n            const monthData = json[month];\n            const categories = Object.keys(monthData);\n            const mIndex = month.replace(/-\\d+$/, '');\n            const colIndex: number = monthIndex[mIndex];\n            categories.forEach((cat) => {\n                const rowIndex = catIndex[cat];\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\n                    const cell = sheet.getCell(rowIndex, colIndex);\n                    cell.value = monthData[cat];\n                }\n            });\n        });\n        return sheet.saveUpdatedCells();\n    }\n\n    public async udpateMaintenanceSheet(json: { [month: string]: { [flat: string]: any; }; }): Promise<void> {\n        const sheet = await this.getSheetByTitle('Maintanence');\n        await sheet.loadCells();\n        const months = Object.keys(json);\n        months.forEach((month) => {\n            const monthData = json[month];\n            const flats = Object.keys(maintIndex);\n            const mIndex = month.replace(/-\\d+$/, '');\n            const colIndex: number = maintenenceMonthIndex[mIndex];\n            flats.forEach((flat) => {\n                const rowIndex = maintIndex[flat];\n                if (typeof rowIndex !== 'undefined' && typeof colIndex !== 'undefined') {\n                    const cell = sheet.getCell(rowIndex, colIndex);\n                    cell.value = monthData[flat];\n                }\n            });\n        });\n        return sheet.saveUpdatedCells();\n    }\n\n    public async searchUpdateRecord(\n        sheetName: string,\n        searchColumns: Record<string, any>,\n        updateColumnName: string,\n        updateValue: any,\n    ) {\n        const sheet = await this.getSheetByTitle(sheetName);\n\n        // Get all rows from the sheet\n        const rows = await sheet.getRows();\n\n        // Search for the record\n        const recordIndex = rows.findIndex(\n            (row: { [x: string]: any; }) =>\n                Object.entries(searchColumns).every(([columnName, value]) => row[columnName] === value));\n\n        if (recordIndex !== -1) {\n            // If a record is found, update its input column if it's empty\n            const recordToUpdate = rows[recordIndex];\n            if (!recordToUpdate[updateColumnName]) {\n                recordToUpdate[updateColumnName] = updateValue;\n                await recordToUpdate.save();\n                console.log('Record updated successfully.');\n            } else {\n                console.log('Record found but input column is not empty.');\n            }\n        } else {\n            console.log('Record not found.');\n            throw new Error('RECORD_NOT_FOUND');\n        }\n    }\n\n    public isEmptySheet(sheet: GoogleSpreadsheetWorksheet): boolean {\n        return !sheet || sheet.rowCount === 0;\n    }\n\n    private async updateSheet(\n        sheet: GoogleSpreadsheetWorksheet,\n        json: { [key: string]: any; }[],\n        startingRow: number = 0,\n    ) {\n        if (json && json.length) {\n            const headers = Object.keys(json[0]);\n            const colCount = headers.length;\n            const rowCount = startingRow + json.length;\n            for (let i = startingRow; i < rowCount; i += 1) {\n                const row = json[i];\n                for (let j = 0; j < colCount; j += 1) {\n                    const cell = sheet.getCell(i + 1, j);\n                    const newVal = row[headers[j]];\n                    if (cell.formattedValue !== newVal) {\n                        cell.value = newVal;\n                    }\n                }\n            }\n        }\n        await sheet.saveUpdatedCells();\n    }\n\n    public async updateSheetWithJSON(json: { [key: string]: any; }[], sheetTitle?: string): Promise<void> {\n        if (sheetTitle) {\n            await this.getSheetByTitle(sheetTitle);\n        }\n        await this.appendRows(json);\n    }\n\n    static getInstance() {\n        if (!gsheetInstance) {\n            gsheetInstance = new GsheetUtilImpl();\n            gsheetInstance.init();\n        }\n        return gsheetInstance;\n    }\n}\n\nexport default GsheetUtilImpl.getInstance();\n","import { getConfig, setCredentials } from '../..';\nimport { ApplicationConfig } from '../../service-types';\nimport SHEET_ACTION_TYPES, { SheetInfo } from './sheet-types';\n\nexport const initSheet = () => ({\n    type: SHEET_ACTION_TYPES.INIT,\n});\n\nexport const initSuccess = (payload: ApplicationConfig) => ({\n    type: SHEET_ACTION_TYPES.INIT_SUCCESS,\n    payload,\n});\n\nexport const initFailure = (payload: string) => ({\n    type: SHEET_ACTION_TYPES.INIT_FAILURE,\n    payload,\n});\n\nexport const setSheetInfo = (payload: SheetInfo) => ({\n    type: SHEET_ACTION_TYPES.SET_SHEET_INFO,\n    payload,\n});\n\nexport function initializeGoogleSheet(secret: string) {\n    return (dispatch: any) => {\n        dispatch(initSheet());\n        const out = setCredentials(secret);\n        if (out.res) {\n            dispatch(initSuccess({ ...getConfig() }));\n        } else {\n            dispatch(initFailure(out.error));\n        }\n    };\n}\n","export type Operation = 'in' | 'having' | 'regex' | 'range' | '==' | '>' | '>=' | '<' | '<=' | '!=';\nexport type TransType = 'debit' | 'credit';\nexport type Query = {\n    opr: Operation;\n    value: string[] | string | number | number[] | boolean;\n    type?: TransType;\n};\nexport type ColQuery = {\n    [colName: string]: Query[] | LogicalMap;\n};\nexport type CatFieldMap = {\n    [category: string]: LogicalMap | ColQuery[];\n};\nexport enum LogicalOpr {\n    'and' = 'and',\n    'or' = 'or',\n    'xor' = 'xor',\n    'not' = 'not',\n    'nand' = 'nand',\n    'nor' = 'nor',\n}\nexport type LogicalMap = {\n    [opr in LogicalOpr | string]: Array<Query | ColQuery>;\n};\n","import {\n    ColQuery, LogicalMap, LogicalOpr, Query,\n} from '../services/cat-map/cat-map-types';\n\nclass LogicalExecutor {\n    public query: LogicalMap;\n\n    public constructor(inpQuery: LogicalMap) {\n        this.query = inpQuery;\n    }\n\n    run(execute: (query: Query | ColQuery) => boolean) {\n        return Object.keys(this.query).every((opr: LogicalOpr | string) => {\n            const children: Array<Query | ColQuery> = this.query[opr];\n            switch (opr) {\n            case LogicalOpr.or:\n                return children.some((child) => execute(child));\n            case LogicalOpr.nor:\n                return !children.some((child) => execute(child));\n            case LogicalOpr.xor: {\n                const res = children.map((child) => execute(child));\n                return res.some((child) => child === true) && res.some((child) => child === false);\n            }\n            case LogicalOpr.nand:\n            case LogicalOpr.not:\n                return !(children.every((child: any) => execute(child)));\n            case LogicalOpr.and:\n            default:\n                return children.every((child: any) => execute(child));\n            }\n        });\n    }\n}\n\nexport default LogicalExecutor;\n","// Minimum length of Soundex keys.\nconst minLength = 4;\n\n// Soundex values belonging to characters.\n// This map also includes vowels (with a value of 0) to easily distinguish\n// between an unknown value or a vowel.\n/** @type {Record<string, number>} */\nconst map: any = {};\n\n/* eslint-disable no-multi-assign */\nmap.a = map.e = map.i = map.o = map.u = map.y = 0;\nmap.b = map.f = map.p = map.v = 1;\nmap.c = map.g = map.j = map.k = map.q = map.s = map.x = map.z = 2;\nmap.d = map.t = 3;\nmap.l = 4;\nmap.m = map.n = 5;\nmap.r = 6;\n/* eslint-enable no-multi-assign */\n\n/**\n * Get the soundex key from a given value.\n *\n * @param {string} value\n *   Value to use.\n * @param {number} [maxLength=4]\n *   Create a code that is at most `maxLength` in size.\n *   The minimum is always 4 (padded on the right).\n * @returns {string}\n *   Soundex key for `value`.\n */\nexport function soundex(value: string, maxLength: number = 4) {\n    const lowercase = String(value).toLowerCase();\n    /** @type {Array.<string|number>} */\n    const results = [];\n    let index = -1;\n    /** @type {number|undefined} */\n    let previous;\n\n    // eslint-disable-next-line no-plusplus\n    while (++index < lowercase.length) {\n        const character = lowercase.charAt(index);\n        /** @type {number|undefined} */\n        let phonetics = map[character];\n\n        if (index === 0) {\n            // Initial letter\n            results.push(character.toUpperCase());\n        } else if (phonetics && phonetics !== previous) {\n            // Phonetics value\n            results.push(phonetics);\n        } else if (phonetics === 0) {\n            // Vowel\n            phonetics = undefined;\n        } else {\n            // Unknown character (including H and W)\n            phonetics = previous;\n        }\n\n        previous = phonetics;\n    }\n\n    return pad(results.join('')).slice(0, maxLength || minLength);\n}\n\n/**\n * Pad a given value with zero characters. The function only pads four characters.\n *\n * @param {string} value\n * @returns {string}\n */\nfunction pad(value: string) {\n    const length = minLength - value.length;\n    let index = -1;\n\n    // eslint-disable-next-line no-plusplus\n    while (++index < length) {\n        value += '0';\n    }\n\n    return value;\n}\n\nexport default { soundex };\n","import { soundex } from './soundex';\nimport { Query } from '../services/cat-map/cat-map-types';\n\nclass QueryExecutor {\n    public query: Query;\n\n    public constructor(inpQuery: Query) {\n        this.query = inpQuery;\n    }\n\n    public run(fieldVal: any, skipSoundex = false): boolean {\n        let res = false;\n        const { opr, value: queryVal } = this.query;\n        if (fieldVal && queryVal) {\n            switch (opr) {\n            case '==': {\n                res = fieldVal.toString() === queryVal.toString() ||\n                        checkSoundexInText(queryVal.toString(), fieldVal.toString());\n                break;\n            }\n            case '!=': {\n                res = fieldVal.toString() !== queryVal.toString();\n                break;\n            }\n            case '>': {\n                res = fieldVal > queryVal;\n                break;\n            }\n            case '>=': {\n                res = fieldVal >= queryVal;\n                break;\n            }\n            case '<': {\n                res = fieldVal < queryVal;\n                break;\n            }\n            case '<=': {\n                res = fieldVal <= queryVal;\n                break;\n            }\n            case 'having': {\n                if (typeof fieldVal === 'string') {\n                    if (Array.isArray(queryVal)) {\n                        res = queryVal.some((item) => {\n                            const qval = item.toString();\n                            const text = fieldVal.toLowerCase();\n                            const keyword = qval.toLowerCase();\n                            return text.indexOf(keyword) > -1 || (!skipSoundex && checkSoundexInText(keyword, text));\n                        });\n                    } else {\n                        const qval = queryVal.toString();\n                        const text = fieldVal.toLowerCase();\n                        const keyword = qval.toLowerCase();\n                        res = text.indexOf(keyword) > -1 || (!skipSoundex && checkSoundexInText(keyword, text));\n                    }\n                }\n                break;\n            }\n            case 'regex': {\n                if (Array.isArray(queryVal)) {\n                    res = queryVal.some((item) => {\n                        const qval = item.toString();\n                        const reg = new RegExp(qval, 'i');\n                        return fieldVal.match(reg)?.length > 0;\n                    });\n                } else {\n                    const qval = queryVal.toString();\n                    const reg = new RegExp(qval, 'i');\n                    res = fieldVal.match(reg)?.length > 0;\n                }\n                break;\n            }\n            case 'in': {\n                if (Array.isArray(queryVal)) {\n                    if (typeof queryVal[0] === 'string') {\n                        res = queryVal.indexOf(fieldVal.toString() as never) > -1 ||\n                                checkSoundexInArray(fieldVal.toString(), queryVal as string[]);\n                    } else {\n                        res = queryVal.indexOf(fieldVal as never) > -1;\n                    }\n                }\n                break;\n            }\n            case 'range': {\n                if (Array.isArray(queryVal)) {\n                    res = typeof queryVal[0] === 'undefined' || fieldVal >= queryVal[0];\n                    res = res && (typeof queryVal[1] === 'undefined' || fieldVal <= queryVal[1]);\n                }\n                break;\n            }\n            default: {\n                // Nothing to do\n            }\n            }\n        }\n        return res;\n    }\n}\n\nconst checkSoundexInText = (keyword: string, text: string) => {\n    const words = text.split(/\\s+/);\n    return words.some((word) => soundex(word.toString()) === soundex(keyword));\n};\n\nconst checkSoundexInArray = (keyword: string, words: string[]) =>\n    words.some((word) => soundex(word.toString()) === soundex(keyword));\n\nexport default QueryExecutor;\n","import { ColQuery, Query, TransType } from '../services/cat-map/cat-map-types';\nimport LogicalExecutor from './logical-executor';\nimport QueryExecutor from './query-executor';\n\nexport default class ColQueryExecutor {\n    public query: ColQuery;\n\n    public constructor(inpQuery: ColQuery) {\n        this.query = inpQuery;\n    }\n\n    run(transaction: { [index: string]: any }, skipSoundex = false) {\n        return Object.keys(this.query).every((columnName) => {\n            const children = this.query[columnName];\n            let out = false;\n            if (Array.isArray(children)) {\n                out = children.every((query) => {\n                    const qExecutor = new QueryExecutor(query);\n                    const fieldVal: any = transaction[columnName];\n                    return qExecutor.run(fieldVal, skipSoundex);\n                });\n            } else {\n                const logicalExec = new LogicalExecutor(children);\n                out = logicalExec.run((query) => {\n                    const qExecutor = new QueryExecutor(query as Query);\n                    const fieldVal: any = transaction[columnName];\n                    return qExecutor.run(fieldVal, skipSoundex);\n                });\n            }\n            return out;\n        });\n    }\n}\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\nimport { TransactionType } from '../services/redux/transactions/trans-types';\nimport ColQueryExecutor from './col-query-executor';\nimport { TransCategory } from './trans-category';\nimport LogicalExecutor from './logical-executor';\n\nexport default class TransMapExecutor {\n    catFieldMap: CatFieldMap;\n\n    public constructor(catMapJson: CatFieldMap) {\n        this.catFieldMap = catMapJson;\n    }\n\n    public run(cashTransactions: TransactionType[]) {\n        const categories: string[] = Object.keys(this.catFieldMap);\n        cashTransactions.forEach((ctrans) => {\n            if (!ctrans.Category) {\n                const category: TransCategory | undefined = categories.find(\n                    (cat: string) => {\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\n                        let out;\n                        if (Array.isArray(children)) {\n                            out = children.every((colQuery) => {\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\n                                return fieldQExecutor.run(ctrans);\n                            });\n                        } else {\n                            const logicalExec = new LogicalExecutor(children);\n                            out = logicalExec.run((colQuery) => {\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\n                                return fieldQExecutor.run(ctrans);\n                            });\n                        }\n                        return out;\n                    },\n                ) as TransCategory;\n                ctrans.Category = category;\n            }\n        });\n    }\n}\n","import { CatFieldMap } from './cat-map-types';\n\nexport default {\n    'Maintenance Collection': [{\n        Credit: [{\n            opr: 'in',\n            value: [\n                '3,200.00', '3200',\n                '2,700.00', '2700',\n                '2,800.00', '2800',\n                '500.00', '500',\n                '6,400.00', '6400',\n                '9,600.00', '9600',\n                '12,800.00', '12800',\n                '19,000.00', '19000',\n            ],\n        }],\n        Description: [{\n            opr: 'having',\n            value: ['maintenance', 'neft', 'upi', 'imps'],\n        }],\n    }],\n    'Audit Fees': [{\n        Description: [{\n            opr: 'having',\n            value: ['N YASWANTH', 'YASWANTH', 'audit', 'audit fees'],\n        }],\n    }],\n    'Corpus Fund': [{\n        Credit: [{\n            opr: 'in',\n            value: [\n                '7500', '7,500.00',\n                '15,000.00', '15000',\n                '22,500.00', '22500',\n                '30,000.00', '30000',\n                '37,500.00', '37500',\n                '45,000.00', '45000',\n            ],\n        }],\n        Description: [{\n            opr: 'having',\n            value: ['corpus', 'neft', 'upi', 'imps'],\n        }],\n    }],\n    'Income Tax Refund': [{\n        Credit: [{\n            opr: 'in',\n            value: ['ACH', 'AY20', 'ACH Credit', 'AAKAS1985M'],\n        }],\n    }],\n    Bescom: [{\n        Description: [{\n            opr: 'having',\n            value: ['BESCOM', 'Electricity', 'EBANK:BBPS'],\n        }],\n    }],\n    BWSSB: [{\n        Debit: [{\n            opr: 'range',\n            value: [14000, 16500],\n        }],\n        Description: [{\n            opr: 'having',\n            value: ['BANGALORE WATER SUPPLY', 'BWSSB', 'BANGALORE ONE', 'EBANK:BBPS'],\n        }],\n    }],\n    'CCTV / Intercomm': [{\n        Description: [{\n            opr: 'having',\n            value: ['SHANKAR TELECOM LINKS', 'Intercom'],\n        }],\n    }],\n    Security: [{\n        Debit: [{\n            opr: 'in',\n            value: [35000, 35000.00, 41000, 41000.00],\n        }],\n    }],\n    'House Keeping Salary': [{\n        Description: [{\n            opr: 'regex',\n            value: [\n                'keeping',\n                'housekeeping',\n                'house keeping',\n                'Housekeeping.+Salary',\n                'House keeping.+Salary',\n                'house-keeping.+salary',\n                'housekeeping.+ladies',\n                'hk.+salary',\n                'hyrunni',\n                'sunanda',\n            ],\n        }],\n    }],\n    'Garden Maintenance': [{\n        Description: [{\n            opr: 'regex',\n            value: ['garden', 'gardner', 'Gardner.+Salary', 'garden.+work', 'Manure'],\n        }],\n    }],\n    'Garbage Collection Vendor / BBMP': [{\n        Description: [{\n            opr: 'having',\n            value: ['SYED ALI BASHA', 'RR CLEANING', 'RR CLEAN'],\n        }],\n    }],\n    'Borewell And Motor Maintenance': [{\n        Description: [{\n            opr: 'having',\n            value: ['borewell', 'motor', 'coil', 'winding'],\n        }],\n    }],\n    'Lift Maintenance': [{\n        Description: [{\n            opr: 'regex',\n            value: ['JOHNSON.+LIFTS', 'Lift'],\n        }],\n    }],\n    'HK Items Purchased': [{\n        Description: [{\n            opr: 'regex',\n            value: [\n                'Housekeeping.+Items',\n                'Housekeeping.+Material',\n                'hk.+item',\n                'HK.+Material',\n                'bleaching',\n                'garbage drum',\n                'powder',\n                'mop',\n                'dust',\n                'dustbin',\n                'soap',\n                'detergent',\n                'broom',\n                'switch',\n                'tubelight',\n                'switch',\n                'light',\n                'bulb',\n                'Phenoyl',\n                'powder',\n                'phenoyl',\n                'sanitizer',\n                'cleaner',\n                'dettol',\n                'bottle',\n                'neem oil',\n                'tap',\n                'kerosene',\n            ],\n        }],\n    }],\n    'Electrical / Plumbing Repairs': [{\n        Description: [{\n            opr: 'having',\n            value: ['electric repair', 'electric work', 'electric', 'Chamundi', 'plumbing'],\n        }],\n    }],\n    'Septic Tank Repairs / Cleaning': [{\n        Description: [{\n            opr: 'having',\n            value: ['septik', 'septic', 'septic tank', 'sewage', 'sewage tank', 'sewage work', 'sewage pipe'],\n        }],\n    }],\n    'Water Tanks Cleaning': [{\n        Description: [{\n            opr: 'regex',\n            value: ['water.+tank', 'cauvery', 'kaveri'],\n        }],\n    }],\n    'Generator Maintenance and Repair': [{\n        Description: [{\n            opr: 'regex',\n            value: ['venus.+energy', 'kirloskar', 'generator'],\n        }],\n    }],\n    'Savings Bank SMS Charges/Cheque book': [{\n        Description: [{\n            opr: 'regex',\n            value: ['SMS .+Alert', 'cheque.+book', 'charges', 'chq.+book'],\n        }],\n    }],\n    'Health Club Maintenance': [{\n        Description: [{\n            opr: 'having',\n            value: ['gym', 'FITNESS', 'sports'],\n        }],\n    }],\n    'Festival/Holiday Celebration': [{\n        Description: [{\n            opr: 'regex',\n            value: [\n                'diwali.+work',\n                'diwali',\n                'festival',\n                'celebration',\n                'pooja',\n                'pongal',\n                'independence',\n                'republic',\n                'sweets',\n                'flag',\n            ],\n        }],\n    }],\n    'Drinking Water for Employees': [{\n        Description: [{\n            opr: 'having',\n            value: ['drinking', 'drinking water', 'mineral water', 'water purchase'],\n        }],\n    }],\n    Diesel: [{\n        Description: [{\n            opr: 'regex',\n            value: ['Diesel'],\n        }],\n    }],\n    'BAF Subscription Charges': [{\n        Description: [{\n            opr: 'regex',\n            value: ['BAF', 'BAF Subscription'],\n        }],\n    }],\n    'Annual Bonus': [{\n        Description: [{\n            opr: 'regex',\n            value: ['bonus'],\n        }],\n    }],\n    'Interest on account': [{\n        Description: [{\n            opr: 'having',\n            value: ['89630100005613'],\n        }],\n    }],\n    'FD Deposit': [{\n        Description: [{\n            opr: 'having',\n            value: ['TO TRANSFER', 'Repayment Credit'],\n        }],\n    }],\n    'Tenant Deposit from the Owners': [{\n        Credit: [{\n            opr: 'in',\n            value: ['10,000.00', '10000'],\n        }],\n    }],\n    'Apartment Work By Security and Others': [{\n        Description: [{\n            opr: 'regex',\n            value: [\n                'Apartment.+Work',\n                'Cleaning.+Rain Water',\n            ],\n        }],\n    }],\n    'Apartment Safety': [{\n        Description: [{\n            opr: 'having',\n            value: [\n                'sanitization',\n                'sanitizing',\n                'mask',\n                'sheild',\n                'shield',\n                'spray',\n                'cutting tree',\n                'fire',\n                'extinguisher',\n                'rat poison',\n            ],\n        }],\n    }],\n    'Apartment developments': [{\n        Description: [{\n            opr: 'having',\n            value: [\n                'stationery',\n                'pen',\n                'paper',\n                'folder',\n                'files',\n                'notebook',\n                'note book',\n                'note-book',\n                'entry book',\n                'reciept book',\n                'bought',\n                'purchased',\n                'purchase of',\n                'cash voucher',\n            ],\n        }],\n    }],\n    'Apartment repairs related': [{\n        Description: [{\n            opr: 'having',\n            value: ['cement work', 'cement', 'service', 'repair', 'spanner', 'fixing', 'fixed'],\n        }],\n    }],\n    'Misc expenses': [{\n        Description: [{\n            opr: 'having',\n            value: ['tea', 'coffee'],\n        }],\n    }],\n    'Fine / Extra Payment Received': [{\n        Description: [{\n            opr: 'having',\n            value: ['maintenance', 'neft', 'upi', 'imps'],\n        }],\n        Credit: [{\n            opr: 'regex',\n            value: ['\\\\d'],\n        }],\n    }],\n    'Other Income': [{\n        Description: [{\n            opr: 'having',\n            value: ['income', 'other'],\n        }],\n        Credit: [{\n            opr: '>',\n            value: 0,\n        }],\n    }],\n    'Cash Withdrawal / in hand': {\n        or: [\n            {\n                Description: [{\n                    opr: 'regex',\n                    value: ['cash', 'withdrawal', 'bank', 'basavaraj', 'carry.+forwarded', 'self'],\n                }],\n            },\n            {\n                'Cheque No': [{\n                    opr: 'regex',\n                    value: ['\\\\d+'],\n                }],\n            },\n        ],\n    },\n    'Deposit to RD account': [{\n        Description: [{\n            opr: 'having',\n            value: ['3715125', 'SI:89630300010611'],\n        }],\n    }],\n} as CatFieldMap;\n","export default {\n    '001': [{\n        Description: [{\n            opr: 'having',\n            value: ['khadir', 'MOHAMEDABDULKHA'],\n        }],\n    }],\n    '002': [{\n        Description: [{\n            opr: 'having',\n            value: [\n                'jyotiprakash.jpl.99',\n                'jyoti prakash',\n                'jyotiprakash',\n                'shainv',\n                'potti',\n                'MAHESH',\n            ],\n        }],\n    }],\n    '003': [{\n        Description: [{\n            opr: 'having',\n            value: ['gulshan', 'padma', '6364883334', 'subhrojyoti', '6289470044'],\n        }],\n    }],\n    '004': [{\n        Description: [{\n            opr: 'having',\n            value: ['ANAND ESHWARDAS', 'ANAND', 'ESHWARDAS'],\n        }],\n    }],\n    '005': [{\n        Description: [{\n            opr: 'having',\n            value: ['KOPRESH'],\n        }],\n    }],\n    '007': [{\n        Description: [{\n            opr: 'having',\n            value: ['007'],\n        }],\n    }],\n    '008': [{\n        Description: [{\n            opr: 'having',\n            value: ['NITHIN', '/008', 'Repaka'],\n        }],\n    }],\n    '009': [{\n        Description: [{\n            opr: 'having',\n            value: ['rutvijkanzaria', 'PRATIK', '9120182537'],\n        }],\n    }],\n    '010': [{\n        Description: [{\n            opr: 'having',\n            value: ['ANANTH', 'BHASKAR', 'PAKALAPATI'],\n        }],\n    }],\n    '011': [{\n        Description: [{\n            opr: 'having',\n            value: ['AKARSH', 'AKARSHPRAVEENRAJ'],\n        }],\n    }],\n    '012': [{\n        Description: [{\n            opr: 'having',\n            value: ['kbg2000@okicici', 'K B GANESH', 'GANESH', 'VIVEKNAYAK', 'VIVEK NAYAK'],\n        }],\n    }],\n    101: [{\n        Description: [{\n            opr: 'having',\n            value: ['VIJAYAKUMAR T', 'VIJAYAKUMAR'],\n        }],\n    }],\n    102: [{\n        Description: [{\n            opr: 'having',\n            value: ['ARNAB', 'CHAKRABORTY', 'ARNABCHAKRABORT'],\n        }],\n    }],\n    103: [{\n        Description: [{\n            opr: 'having',\n            value: ['KRISHNA KUMAR', 'KRISHNAKUMAR'],\n        }],\n    }],\n    104: [{\n        Description: [{\n            opr: 'having',\n            value: ['AMIT KUMAR', 'KARMAKAR', 'AMITKUMAR'],\n        }],\n    }],\n    105: [{\n        Description: [{\n            opr: 'having',\n            value: ['JOHN PINTO', 'JOHN', 'MURUGAN', 'VIKASVERMA', 'VIKAS VERMA', 'MB105', '105MAINTENA', '8892757591'],\n        }],\n    }],\n    106: [{\n        Description: [{\n            opr: 'having',\n            value: ['mr.uttammohanty', 'uttam'],\n        }],\n    }],\n    107: [{\n        Description: [{\n            opr: 'having',\n            value: ['POLAKALA', 'NARAYANA PRASAD'],\n        }],\n    }],\n    108: [{\n        Description: [{\n            opr: 'having',\n            value: ['EMMANUEL RAJA A', 'EMMANUEL'],\n        }],\n    }],\n    109: [{\n        Description: [{\n            opr: 'having',\n            value: ['K S A RAJA RAM KUMAR', 'RAJARAMKUMAR'],\n        }],\n    }],\n    110: [{\n        Description: [{\n            opr: 'having',\n            value: ['SONYKUMARI', 'SONY KUMARI', 'PAVAN DEVARU', 'PAVANDEVARU', 'MOBLTA'],\n        }],\n    }],\n    111: [{\n        Description: [{\n            opr: 'having',\n            value: ['SENTHILKUMAR', 'SENTHIL'],\n        }],\n    }],\n    112: [{\n        Description: [{\n            opr: 'having',\n            value: ['ARINDAM'],\n        }],\n    }],\n    201: [{\n        Description: [{\n            opr: 'having',\n            value: ['ESWAR KRISHNAN', 'ESWAR', 'KARTHIKEYAN', 'flat201', 'ARIJIT'],\n        }],\n    }],\n    202: [{\n        Description: [{\n            opr: 'having',\n            value: ['SRIHARSHA', 'SRI HARSHA'],\n        }],\n    }],\n    203: [{\n        Description: [{\n            opr: 'having',\n            value: ['NILOTPALDAS'],\n        }],\n    }],\n    204: [{\n        Description: [{\n            opr: 'having',\n            value: ['AMLANJYOTI', 'AMLAN'],\n        }],\n    }],\n    205: [{\n        Description: [{\n            opr: 'having',\n            value: ['VIKRAMADITYA', 'IKRAMADITYA'],\n        }],\n    }],\n    206: [{\n        Description: [{\n            opr: 'having',\n            value: ['PINAKI', 'vishnupb619'],\n        }],\n    }],\n    207: [{\n        Description: [{\n            opr: 'having',\n            value: ['8015616123', 'RAVI TEJA', 'tr.1993@axisb', 'SRINIVAS', 'prashant.dombale'],\n        }],\n    }],\n    208: [{\n        Description: [{\n            opr: 'having',\n            value: ['JESUDOSS'],\n        }],\n    }],\n    209: [{\n        Description: [{\n            opr: 'having',\n            value: ['MULUKUTLA', 'AJU JAMES', 'AJUJAMES', 'T R RAJARAM', 'TRRAJARAM', 'CHALAPATHI'],\n        }],\n    }],\n    210: [{\n        Description: [{\n            opr: 'having',\n            value: ['TARANBIR', 'IMPSMBRSur'],\n        }],\n    }],\n    211: [{\n        Description: [{\n            opr: 'having',\n            value: ['9972528008', 'pranjan'],\n        }],\n    }],\n    212: [{\n        Description: [{\n            opr: 'having',\n            value: ['SURAJIT'],\n        }],\n    }],\n    301: [{\n        Description: [{\n            opr: 'having',\n            value: ['PRABUDH'],\n        }],\n    }],\n    302: [{\n        Description: [{\n            opr: 'having',\n            value: ['BALAJI'],\n        }],\n    }],\n    303: [{\n        Description: [{\n            opr: 'having',\n            value: ['SURENDRA'],\n        }],\n    }],\n    304: [{\n        Description: [{\n            opr: 'having',\n            value: ['MEHDI'],\n        }],\n    }],\n    305: [{\n        Description: [{\n            opr: 'having',\n            value: ['VIVIN'],\n        }],\n    }],\n    306: [{\n        Description: [{\n            opr: 'having',\n            value: ['ASHIM', 'DEBAJYOTI', 'MUTHIAH'],\n        }],\n    }],\n    307: [{\n        Description: [{\n            opr: 'having',\n            value: ['SAMPREETH', 'maddyrocks'],\n        }],\n    }],\n    308: [{\n        Description: [{\n            opr: 'having',\n            value: ['PRAHLAD'],\n        }],\n    }],\n    309: [{\n        Description: [{\n            opr: 'having',\n            value: ['7406849918', 'prasad.kiran', 'kbv018@okhdfcbank'],\n        }],\n    }],\n    310: [{\n        Description: [{\n            opr: 'having',\n            value: ['PREMA'],\n        }],\n    }],\n    311: [{\n        Description: [{\n            opr: 'having',\n            value: ['GURUPRASADA', 'CHOKKADI'],\n        }],\n    }],\n    312: [{\n        Description: [{\n            opr: 'having',\n            value: ['SHAKTHI', 'VINAYAK'],\n        }],\n    }],\n    401: [{\n        Description: [{\n            opr: 'having',\n            value: ['HARISHA'],\n        }],\n    }],\n    402: [{\n        Description: [{\n            opr: 'having',\n            value: ['cooldharsha', 'DHARSHA', 'JITHA', 'JITHAJAMES', 'JITHA JAMES'],\n        }],\n    }],\n    403: [{\n        Description: [{\n            opr: 'having',\n            value: ['8147758124', 'shaheer'],\n        }],\n    }],\n    404: [{\n        Description: [{\n            opr: 'having',\n            value: ['NOBROKER', '/404Main', 'MOHAMMED SAIF'],\n        }],\n    }],\n    405: [{\n        Description: [{\n            opr: 'having',\n            value: ['SANTOSHKUMAR', '/405main', 'SANTHOSH KUMAR', 'MALLA'],\n        }],\n    }],\n    406: [{\n        Description: [{\n            opr: 'having',\n            value: ['PRAVEENVIJAY', 'PRAVEEN VIJAY'],\n        }],\n    }],\n    407: [{\n        Description: [{\n            opr: 'having',\n            value: ['GALLA', 'VARADARAJU'],\n        }],\n    }],\n    408: [{\n        Description: [{\n            opr: 'having',\n            value: ['UDAY KIRAN', 'UDAY', 'YAGNAMURTHY'],\n        }],\n    }],\n    409: [{\n        Description: [{\n            opr: 'having',\n            value: ['PRABU', 'SUNDARRAJU', 'Jeevanantham'],\n        }],\n    }],\n    410: [{\n        Description: [{\n            opr: 'having',\n            value: ['SIVASANKAR', 'HANUMANTHA', 'GANGJI', 'rohinimh19', 'ROHINI', 'MALLIKARJUN'],\n        }],\n    }],\n    411: [{\n        Description: [{\n            opr: 'having',\n            value: ['NATESAN', 'ADITYA KOLLURI', 'ADITYAKOLLURI', 'santumahapatra', 'santu mahapatra'],\n        }],\n    }],\n    412: [{\n        Description: [{\n            opr: 'having',\n            value: ['CHIRANJAN', 'PAVITHRADM', 'PAVITHRA'],\n        }],\n    }],\n};\n","import { CatFieldMap, ColQuery, LogicalMap } from '../services/cat-map/cat-map-types';\nimport { TransactionType } from '../services/redux/transactions/trans-types';\nimport ColQueryExecutor from './col-query-executor';\nimport { FlatCategory } from './flat-category';\nimport LogicalExecutor from './logical-executor';\n\nexport default class MaintMapExecutor {\n    catFieldMap: CatFieldMap;\n\n    public constructor(catMapJson: CatFieldMap) {\n        this.catFieldMap = catMapJson;\n    }\n\n    public run(cashTransactions: TransactionType[]) {\n        const categories: string[] = Object.keys(this.catFieldMap);\n        cashTransactions.forEach((ctrans) => {\n            if (!ctrans.Flat) {\n                const flat: FlatCategory | undefined = categories.find(\n                    (cat: string) => {\n                        const children: LogicalMap | ColQuery[] = this.catFieldMap[cat];\n                        let out;\n                        if (Array.isArray(children)) {\n                            out = children.every((colQuery) => {\n                                const fieldQExecutor = new ColQueryExecutor(colQuery);\n                                return fieldQExecutor.run(ctrans, true);\n                            });\n                        } else {\n                            const logicalExec = new LogicalExecutor(children);\n                            out = logicalExec.run((colQuery) => {\n                                const fieldQExecutor = new ColQueryExecutor(colQuery as ColQuery);\n                                return fieldQExecutor.run(ctrans, true);\n                            });\n                        }\n                        return out;\n                    },\n                ) as FlatCategory;\n                ctrans.Flat = flat;\n            }\n        });\n    }\n}\n","export enum TransCategory {\n    'Audit Fees' = 'Audit Fees',\n    'BWSSB' = 'BWSSB',\n    'Diesel' = 'Diesel',\n    'Bescom' = 'Bescom',\n    'House Keeping Salary' = 'House Keeping Salary',\n    'Security' = 'Security',\n    'Garden Maintenance' = 'Garden Maintenance',\n    'Garbage Collection Vendor / BBMP' = 'Garbage Collection Vendor / BBMP',\n    'Borewell And Motor Maintenance' = 'Borewell And Motor Maintenance',\n    'Annual Bonus' = 'Annual Bonus',\n    'Lift Maintenance' = 'Lift Maintenance',\n    'HK Items Purchased' = 'HK Items Purchased',\n    'Health Club Maintenance' = 'Health Club Maintenance',\n    'Electrical / Plumbing Repairs' = 'Electrical / Plumbing Repairs',\n    'Apartment repairs related' = 'Apartment repairs related',\n    'Apartment Painting' = 'Apartment Painting',\n    'CCTV / Intercomm' = 'CCTV / Intercomm',\n    'Misc expenses' = 'Misc expenses',\n    'Apartment developments' = 'Apartment developments',\n    'Apartment Work By Security and Others' = 'Apartment Work By Security and Others',\n    'Septic Tank Repairs / Cleaning' = 'Septic Tank Repairs / Cleaning',\n    'Water Tanks Cleaning' = 'Water Tanks Cleaning',\n    'Generator Maintenance and Repair' = 'Generator Maintenance and Repair',\n    'Savings Bank SMS Charges/Cheque book' = 'Savings Bank SMS Charges/Cheque book',\n    'Festival/Holiday Celebration' = 'Festival/Holiday Celebration',\n    'Drinking Water for Employees' = 'Drinking Water for Employees',\n    'BAF Subscription Charges' = 'BAF Subscription Charges',\n    'Maintenance Collection' = 'Maintenance Collection',\n    'Income Tax Refund' = 'Income Tax Refund',\n    'Other Income' = 'Other Income',\n    'Interest on account' = 'Interest on account',\n    'Fine / Extra Payment Received' = 'Fine / Extra Payment Received',\n    'Corpus Fund' = 'Corpus Fund',\n    'Tenant Deposit from the Owners' = 'Tenant Deposit from the Owners',\n    'FD Deposit' = 'FD Deposit',\n}\nexport default { TransCategory };\n","import moment from 'moment';\nimport TransMapExecutor from '../../../utils/trans-map-executor';\nimport gsheetUtil from '../../googleapis/gsheet-util-impl';\nimport catMapJson from '../../cat-map/cat-map';\nimport maintMapJson from '../../maint-map/maint-map';\nimport { TransactionType, TransActions, MonthlyCatSplit, MonthlyMaintSplit } from './trans-types';\nimport MaintMapExecutor from '../../../utils/maint-map-executor';\nimport { TransCategory } from '../../../utils/trans-category';\n\nexport const loadTransactions = () => ({\n    type: TransActions.LOAD_TRANS,\n});\n\nexport const loadCashTransactionSuccess = (payload: any) => ({\n    type: TransActions.LOAD_CASH_TRANS_SUCCESS,\n    payload,\n});\n\nexport const loadOnlineTransactionSuccess = (payload: any) => ({\n    type: TransActions.LOAD_ONLINE_TRANS_SUCCESS,\n    payload,\n});\n\nexport const loadCashTransactionFailure = (payload: any) => ({\n    type: TransActions.LOAD_CASH_TRANS_FAILURE,\n    payload,\n});\n\nexport const loadOnlineTransactionFailure = (payload: any) => ({\n    type: TransActions.LOAD_ONLINE_TRANS_FAILURE,\n    payload,\n});\n\nexport const updateMonthlySplit = (payload: any) => ({\n    type: TransActions.UPDATE_MONTHLY_SPLIT,\n    payload,\n});\n\nexport const resetMonthlyCatSplit = () => ({\n    type: TransActions.RESET_MONTHLY_SPLIT,\n});\n\nexport const updateMonthlyMaintenanceSplit = (payload: any) => ({\n    type: TransActions.UPDATE_MONTHLY_MAINT_SPLIT,\n    payload,\n});\n\nexport const resetMonthlyMaintenanceCatSplit = () => ({\n    type: TransActions.RESET_MONTHLY_MAINT_SPLIT,\n});\n\nexport const resetTransaction = () => ({\n    type: TransActions.RESET_TRANS,\n});\n\nexport function filterTransactions(transactions: TransactionType[], filter: TransCategory[]) {\n    return transactions.filter((trans) => {\n        if (trans.Category) {\n            const categories = trans.Category.split(',');\n            return categories.some((category) => {\n                const [cat] = category.split('(');\n                return filter.indexOf(cat.trim() as any) > -1;\n            });\n        }\n        return false;\n    });\n}\n\nexport function fetchTransactions(sheetName = 'Cash Transactions') {\n    return (dispatch: any) => {\n        dispatch(loadTransactions());\n        gsheetUtil.init().then(() => {\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\n                const transMapExec = new TransMapExecutor(catMapJson as any);\n                transMapExec.run(value as TransactionType[]);\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\n                maintMapExecutor.run(filterTransactions(\n                    value as TransactionType[],\n                    [\n                        TransCategory['Maintenance Collection'],\n                        TransCategory['Corpus Fund'],\n                    ]));\n                dispatch(loadCashTransactionSuccess(value as any));\n                gsheetUtil.saveSheetWithJSON(value);\n            }).catch((e: any) => {\n                dispatch(loadCashTransactionFailure(e.message));\n            });\n        });\n    };\n}\n\nexport function fetchOnlineTransactions(sheetName = 'Online Transactions') {\n    return (dispatch: any) => {\n        dispatch(loadTransactions());\n        gsheetUtil.init().then(() => {\n            gsheetUtil.getSheetByTitleAsJson(sheetName).then((value) => {\n                const transMapExec = new TransMapExecutor(catMapJson as any);\n                transMapExec.run(value as TransactionType[]);\n                const maintMapExecutor = new MaintMapExecutor(maintMapJson as any);\n                maintMapExecutor.run(filterTransactions(\n                    value as TransactionType[],\n                    [\n                        TransCategory['Maintenance Collection'],\n                        TransCategory['Corpus Fund'],\n                    ]));\n                dispatch(loadOnlineTransactionSuccess(value as any));\n                gsheetUtil.saveSheetWithJSON(value);\n            }).catch((e: any) => {\n                dispatch(loadOnlineTransactionFailure(e.message));\n            });\n        });\n    };\n}\n\nexport function doMonthlyCatSplit(data: TransactionType[], monthlySplit: MonthlyCatSplit) {\n    return (dispatch: any) => {\n        dispatch(loadTransactions());\n        data.forEach((datum: TransactionType) => {\n            const category = datum.Category;\n            const date = datum.Date;\n            if (category && date) {\n                const categories = category.split(',');\n                const isDebit = datum.Debit && datum.Debit?.toString() !== '0';\n                let amount = isDebit ?\n                    parseFloat(datum.Debit!.toString().replace(/,/g, '')) :\n                    parseFloat(datum.Credit!.toString().replace(/,/g, ''));\n                categories.forEach((catWithAmount: string) => {\n                    let cat = catWithAmount;\n                    if (catWithAmount.indexOf('(') > -1) {\n                        const splitCat = catWithAmount.split('(');\n                        [cat] = splitCat;\n                        amount = parseFloat(splitCat[1].replace(/(\\(|\\))/g, '').replace(/,/g, ''));\n                    }\n                    updateMonthlyCat(monthlySplit, datum, date, cat.trim(), !!isDebit, amount);\n                });\n            }\n        });\n        dispatch(updateMonthlySplit({ ...monthlySplit }));\n    };\n}\n\nfunction updateMonthlyCat(\n    monthlySplit: MonthlyCatSplit,\n    datum: TransactionType,\n    date: string,\n    cat: string,\n    isDebit: boolean,\n    amount: number,\n) {\n    const replacedDate = date.replace(/\\//g, '-');\n    const month = moment(replacedDate, 'DD-MM-YYYY').format('MMM-YY');\n    if (!monthlySplit) {\n        monthlySplit = {};\n    }\n    if (!monthlySplit[month]) {\n        monthlySplit[month] = {};\n    }\n    if (isDebit) {\n        amount = -amount;\n    }\n    if (amount && typeof amount === 'number') {\n        if (!monthlySplit[month][cat]) {\n            monthlySplit[month][cat] = amount;\n        } else {\n            monthlySplit[month][cat] += amount;\n        }\n    } else {\n        console.log('cat', cat, month, datum);\n    }\n}\n\nexport function doMonthlyMaintSplit(data: TransactionType[], monthlySplit: MonthlyMaintSplit) {\n    return (dispatch: any) => {\n        dispatch(loadTransactions());\n        data.forEach((datum: TransactionType) => {\n            const flat = datum.Flat;\n            const date = datum.Date;\n            const category = datum.Category;\n            if (flat && date && category) {\n                const month = moment(date, 'DD/MM/YYYY').format('MMM-YY');\n                if (!monthlySplit) {\n                    monthlySplit = {};\n                }\n                if (!monthlySplit[month]) {\n                    monthlySplit[month] = {};\n                }\n                let amount = parseFloat(datum.Credit!.toString().replace(/,/g, ''));\n                if (category.indexOf('(') > -1) {\n                    const splitCat = category.match(/Maintenance Collection\\s+\\((\\d+(\\.\\d+)?)\\)/);\n                    if (splitCat) {\n                        amount = parseFloat(splitCat[1]);\n                    }\n                }\n                if (amount && typeof amount === 'number') {\n                    if (!monthlySplit[month][flat]) {\n                        monthlySplit[month][flat] = amount;\n                    } else {\n                        monthlySplit[month][flat] += amount;\n                    }\n                } else {\n                    console.log('Flat', flat, month, datum);\n                }\n            }\n        });\n        dispatch(updateMonthlyMaintenanceSplit({ ...monthlySplit }));\n    };\n}\n","import moment from 'moment';\nimport React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Table from '@mui/material/Table';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport { fetchTransactions } from '../../services/redux/transactions/trans-actions';\nimport { TransData } from '../../services/redux/transactions/trans-types';\n\nfunction CategorizeCash() {\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchTransactions() as any);\n    }, [dispatch]);\n    const sheetData = useMemo(() => sheetInfo.cashTransData, [sheetInfo]);\n    const headers = useMemo(() => {\n        let out: string[] = [];\n        if (sheetData && sheetData.length >= 1) {\n            out = Object.keys(sheetData[0]);\n        }\n        return out;\n    }, [sheetData]);\n    return (\n        <>\n            <div className=\"cash-trans\">\n                {sheetInfo.loading && <CircularProgress />}\n                {!sheetInfo.loading && (\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Sl. No.</TableCell>\n                                {headers.map((header: string) => (\n                                    <TableCell key={header}>{header}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\n                                <TableRow key={JSON.stringify(row)}>\n                                    <TableCell>{index + 1}</TableCell>\n                                    {headers.map((header: string) => (\n                                        <TableCell key={`${header}-${row[header]}`}>\n                                            {header !== 'Date' ? row[header] :\n                                                moment(row[header], 'DD/MM/YYYY').format('DD/MM/YYYY')}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default CategorizeCash;\n","import moment from 'moment';\nimport React, { useEffect, useMemo } from 'react';\nimport {\n    CircularProgress, Table, TableHead, TableRow, TableCell, TableBody,\n} from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchOnlineTransactions } from '../../services/redux/transactions/trans-actions';\nimport { TransData } from '../../services/redux/transactions/trans-types';\n\nfunction CategorizeOnline() {\n    const sheetInfo: TransData = useSelector((state: any) => state.trans);\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(fetchOnlineTransactions('Online Transactions') as any);\n    }, [dispatch]);\n    const sheetData = sheetInfo.onlineTransData;\n    const headers = useMemo(() => {\n        let out: string[] = [];\n        if (sheetData && sheetData.length > 1) {\n            out = Object.keys(sheetData[0]);\n        }\n        return out;\n    }, [sheetData]);\n    return (\n        <>\n            <div className=\"online-trans\">\n                {sheetInfo.loading && <CircularProgress />}\n                {!sheetInfo.loading && (\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Sl. No.</TableCell>\n                                {headers.map((header: string) => (\n                                    <TableCell key={header}>{header}</TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {!!sheetData && sheetData.map((row: { [key: string]: any }, index) => (\n                                <TableRow key={JSON.stringify(row)}>\n                                    <TableCell>{index + 1}</TableCell>\n                                    {headers.map((header: string) => (\n                                        <TableCell key={`${header}-${row[header]}`}>\n                                            {header !== 'Date' ? row[header] :\n                                                moment(row[header], 'DD-MM-YYYY').format('DD/MM/YYYY')}\n                                        </TableCell>\n                                    ))}\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                )}\n            </div>\n        </>\n    );\n}\n\nexport default CategorizeOnline;\n","import { JsonView, defaultStyles } from 'react-json-view-lite';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n    Alert, Stepper, Typography, Step, StepLabel, Button,\n} from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\nimport { initializeGoogleSheet } from '../../services/redux/google-sheet/sheet-actions';\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\nimport {\n    doMonthlyCatSplit,\n    doMonthlyMaintSplit,\n    filterTransactions,\n} from '../../services/redux/transactions/trans-actions';\nimport { TransactionType, TransData } from '../../services/redux/transactions/trans-types';\nimport CategorizeCash from './categorize-cash';\nimport CategorizeOnline from './categorize-online';\nimport { TransCategory } from '../../utils/trans-category';\nimport './categorizer.css';\n\nfunction Categorizer() {\n    const [message, setMessage] = useState<string>();\n    const [type, setType] = useState<'online' | 'cash' | 'monthly' | undefined>('cash');\n    const [secret, setSecret] = useState('');\n    const dispatch = useDispatch();\n    const sheetData: GoogleSheet = useSelector((state: any) => state.sheet);\n    const { initError } = sheetData;\n    const transData: TransData = useSelector((state: any) => state.trans);\n    const { monthlyCatSplit, cashTransData, onlineTransData, monthlyMaintSplit } = transData;\n    useEffect(() => {\n        if (secret) {\n            dispatch(initializeGoogleSheet(secret) as any);\n        }\n    }, [dispatch, secret]);\n    const splitMonthly = useCallback(() => {\n        if (cashTransData && onlineTransData) {\n            dispatch(doMonthlyCatSplit([...cashTransData, ...onlineTransData] as any, {}) as any);\n            setType(undefined);\n        }\n    }, [cashTransData, dispatch, onlineTransData]);\n    const splitMonthlyMaintenance = useCallback(() => {\n        if (cashTransData && onlineTransData) {\n            const filteredTransData: TransactionType[] = filterTransactions(\n                [...cashTransData as TransactionType[], ...onlineTransData as TransactionType[]],\n                [\n                    TransCategory['Maintenance Collection'],\n                ],\n            );\n            dispatch(doMonthlyMaintSplit(filteredTransData as any, {}) as any);\n            setType(undefined);\n        }\n    }, [cashTransData, dispatch, onlineTransData]);\n    const saveCategorized = useCallback(() => {\n        gsheetUtil.updateCategorySheet(monthlyCatSplit as any).then(() => {\n            console.log('Saved');\n            setMessage('Summary Updated');\n        });\n    }, [monthlyCatSplit]);\n    const saveMaitenenceSplit = useCallback(() => {\n        gsheetUtil.udpateMaintenanceSheet(monthlyMaintSplit as any).then(() => {\n            console.log('Saved');\n            setMessage('Maintenence Split Updated');\n        });\n    }, [monthlyMaintSplit]);\n    const [activeStep, setActiveStep] = useState(0);\n    const steps = useMemo(() => (\n        ['Cash Transactions', 'Online Transactions', 'Map Transactions', 'Categorize Maintenance']), []);\n    const isStepOptional = useCallback((index: number) => false, []);\n    const isCompletedStep = useCallback((index: number) => false, []);\n    const handleBack = useCallback(() => {\n        switch (activeStep) {\n        case 3: {\n            setType(undefined);\n            setActiveStep(2);\n            break;\n        }\n        case 2: {\n            setType('online');\n            setActiveStep(1);\n            break;\n        }\n        case 1: {\n            setType('cash');\n            setActiveStep(0);\n            break;\n        }\n        default:\n            // Nothing to be done\n        }\n    }, [activeStep]);\n    const handleSkip = useCallback(() => {}, []);\n    const handleNext = useCallback(() => {\n        switch (activeStep) {\n        case 0: {\n            setType('online');\n            setActiveStep(1);\n            break;\n        }\n        case 1: {\n            setType(undefined);\n            setActiveStep(2);\n            splitMonthly();\n            break;\n        }\n        case 2: {\n            setType(undefined);\n            setActiveStep(3);\n            splitMonthlyMaintenance();\n            break;\n        }\n        default:\n            // Nothing to be done\n        }\n    }, [activeStep, splitMonthlyMaintenance, splitMonthly]);\n    return (\n        <div>\n            {!!message && <Alert severity=\"info\">{message}</Alert> }\n            {!!initError && <Alert severity=\"error\">{initError}</Alert>}\n            <div className=\"stepper-header\">\n                <Stepper className=\"steps\" activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: { optional?: React.ReactNode } = {};\n                        if (isStepOptional(index)) {\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                        }\n                        if (isCompletedStep(index)) {\n                            stepProps.completed = false;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                <div className=\"nav\">\n                    <Button\n                        disabled={activeStep === 0}\n                        onClick={handleBack}\n                    >\n                        Back\n                    </Button>\n                    {isStepOptional(activeStep) && (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleSkip}\n                        >\n                            Skip\n                        </Button>\n                    )}\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={handleNext}\n                    >\n                        {(activeStep === steps.length - 1 && 'Save') || 'Next'}\n                    </Button>\n                </div>\n            </div>\n            <div className=\"control\">\n                {activeStep === 2 && (\n                    <Button\n                        variant=\"outlined\"\n                        disabled={!monthlyCatSplit}\n                        onClick={saveCategorized}\n                    >\n                        Save Categorized\n                    </Button>\n                )}&nbsp;&nbsp;&nbsp;\n                {activeStep === 3 && (\n                    <Button\n                        variant=\"outlined\"\n                        disabled={!monthlyMaintSplit}\n                        onClick={saveMaitenenceSplit}\n                    >\n                        Save Split\n                    </Button>\n                )}\n            </div>\n            {!initError && !!sheetData.sheetConfig.secret && (\n                <>\n                    {activeStep === 0 && <CategorizeCash />}\n                    {activeStep === 1 && <CategorizeOnline />}\n                    {activeStep === 2 && !!monthlyCatSplit && <JsonView style={defaultStyles} data={monthlyCatSplit} />}\n                    {activeStep === 3 && !!monthlyMaintSplit &&\n                        <JsonView style={defaultStyles} data={monthlyMaintSplit} />\n                    }\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Categorizer;\n","import React from 'react';\nimport Categorizer from '../components/categorizer';\n\nconst Categorize: React.FC = () => (\n    <Categorizer />\n);\n\nexport default Categorize;\n","import { TransCategory } from '../../utils/trans-category';\n\nexport function parseExpenseInfo(text: string, expenseTypes: string[] = []) {\n    if (!expenseTypes || expenseTypes.length === 0) {\n        expenseTypes = Object.values(TransCategory);\n    }\n    // Initialize the outputs\n    let description = '';\n    const dates: any[] = [];\n    const amounts: any[] = [];\n    // Split the text based on space, newline, or underscore delimiter\n    const words = text.split(/[\\s_]/m).filter((word) => word && word !== '/');\n\n    // Iterate through the words to find the relevant information\n    words.forEach((word) => {\n        // Parse date\n        if (/^\\d{1,2}-\\d{1,2}-\\d{2,4}$/.test(word)) {\n            dates.push(word);\n        }\n        // Parse amount\n        if (/^\\d+(\\.\\d{1,2})?-?$/.test(word)) {\n            amounts.push(word);\n        }\n    });\n    // Parse description\n    if (!description) {\n        description = text.replace(dates[0], '');\n        description = description.replace(amounts[0], '').replace(/_/g, '');\n        description = findTopMatchingText(expenseTypes, [description]) || description;\n    }\n    return {\n        date: dates[0],\n        amount: parseFloat(amounts[0]) || 0,\n        description,\n    };\n}\n\nexport function findTopMatchingText(texts: string[], words: string[]) {\n    const rankMap = new Map<string, number>();\n\n    // Iterate through each text and count the number of word matches\n    texts.forEach((text) => {\n        let rank = 0;\n        const key = text.toLowerCase();\n        words.forEach((word) => {\n            if (key.includes(word.toLowerCase())) {\n                rank += 1;\n            }\n        });\n\n        rankMap.set(text, rank);\n    });\n\n    const valueArray = Array.from(rankMap);\n    // Sort the texts based on the rank in descending order\n    const sortedTexts = [...valueArray].sort((a, b) => b[1] - a[1]);\n\n    // Return the top matching text\n    if (sortedTexts.length > 0 && sortedTexts[0][1] !== 0) {\n        return sortedTexts[0][0];\n    }\n\n    return ''; // Return empty string if no matches are found\n}\n","import { PDFDocument, PDFName } from 'pdf-lib';\nimport html2canvas from 'html2canvas';\n\nclass PDFToImagesConverter {\n    async pdfDataUriToCanvas(pdfBlobUrl: string): Promise<string | undefined> {\n        const promise = new Promise<string | undefined>((resolve) => {\n            const iframe = document.getElementById('myIframe') as HTMLIFrameElement;\n            iframe.onload = async () => {\n                const iframeDocument = iframe.contentWindow?.document;\n                if (iframeDocument?.body) {\n                    const canvas = await html2canvas(iframeDocument.body);\n                    const imageData = canvas.toDataURL('image/png');\n                    // Convert canvas to image\n                    const previewImage = document.getElementById('cap-image');\n                    if (previewImage) {\n                        previewImage.setAttribute('src', imageData);\n                    }\n                    resolve(imageData);\n                } else {\n                    resolve(undefined);\n                }\n                iframe.className = '';\n            };\n            iframe.className = 'active';\n            iframe.src = pdfBlobUrl;\n        });\n        return promise;\n    }\n\n    async convert(url: string) {\n        const outputPath = '';\n        const existingPdfBytes = await fetch(url).then((res) => res.arrayBuffer());\n        const pdfDoc = await PDFDocument.load(existingPdfBytes);\n        // // const pages = pdf.getPages();\n        const newPdf = await PDFDocument.create();\n        const [firstPage] = await newPdf.copyPages(pdfDoc, [0]);\n        // newPdf.addPage(firstPage);\n        // const base64Pdf = await newPdf.saveAsBase64({ dataUri: true });\n        // const blocPdfURL = this.dataURItoBlobURL(base64Pdf);\n        // const base64Image = await this.pdfDataUriToCanvas(blocPdfURL);\n\n        // @ts-ignore\n        const { dict } = firstPage.node;\n        const resources = dict.get(PDFName.of('Resources'));\n\n        const xObject = resources.get(PDFName.of('XObject'));\n        if (!xObject) {\n            console.log('No XObject resources found on this page.');\n            return [];\n        }\n\n        const extractedImages: any[] = [];\n        Object.entries(xObject.dict).forEach(([name, ref]: any) => {\n            const xObj: any = pdfDoc.context.lookup(ref);\n            // Check if the XObject is an image\n            if (xObj && xObj.dict && xObj.dict.get(PDFName.of('Subtype'))?.toString() === '/Image') {\n            // Get image data\n                const imageData = xObj.dict.context.lookupMaybe(xObj.dict.dataStart, (PDF_KEYS: any) =>\n                    typeof PDF_KEYS === 'object' ? PDF_KEYS : null);\n                // Get image properties\n                const bitsPerComponent = xObj.dict.get(PDFName.of('BitsPerComponent'))?.toString();\n                const colorSpace = xObj.dict.get(PDFName.of('ColorSpace'))?.toString();\n                const filter = xObj.dict.get(PDFName.of('Filter'))?.toString();\n                // Determine file extension based on filter\n                let extension = '.raw';\n                if (filter) {\n                    if (filter.includes('/DCTDecode')) {\n                        extension = '.jpg';\n                    } else if (filter.includes('/FlateDecode')) {\n                        extension = '.png'; // Note: This is simplified, FlateDecode doesn't directly map to PNG\n                    } else if (filter.includes('/JBIG2Decode')) {\n                        extension = '.jbig2';\n                    } else if (filter.includes('/JPXDecode')) {\n                        extension = '.jp2';\n                    }\n                }\n                //\n                if (imageData) {\n                    extractedImages.push({\n                        name,\n                        path: outputPath,\n                        properties: {\n                            bitsPerComponent,\n                            colorSpace,\n                            filter,\n                        },\n                    });\n                    console.log(`Extracted image: ${outputPath}`);\n                }\n            }\n        });\n        return extractedImages;\n    }\n\n    base64ToUint8Array(base64: string) {\n        const binaryString = atob(base64);\n        const { length } = binaryString;\n        const uint8Array = new Uint8Array(length);\n        for (let i = 0; i < length; i += 1) {\n            uint8Array[i] = binaryString.charCodeAt(i);\n        }\n        return uint8Array;\n    }\n\n    uint8ArrayToBase64(uint8Array: Uint8Array): string {\n        let binary = '';\n        const len = uint8Array.length;\n        for (let i = 0; i < len; i += 1) {\n            binary += String.fromCharCode(uint8Array[i]);\n        }\n        return btoa(binary);\n    }\n\n    uint8ArrayToBase64Image(uint8Array: Uint8Array, mimeType: string = 'image/png'): string {\n        const base64String = this.uint8ArrayToBase64(uint8Array);\n        return `data:${mimeType};base64,${base64String}`;\n    }\n\n    dataURItoBlobURL(dataURI: string) {\n        // Split the Data URI to get the MIME type and Base64 content\n        const [header, base64Data] = dataURI.split(',');\n        const match = /:(.*?);/.exec(header);\n        if (!match) {\n            throw new Error('Invalid data URI format');\n        }\n        const mimeType = match[1]; // Extract MIME type\n        // Convert Base64 to raw binary data\n        const byteCharacters = atob(base64Data);\n        const byteNumbers = new Uint8Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i += 1) {\n            byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        // Create a Blob from the binary data\n        const blob = new Blob([byteNumbers], { type: mimeType });\n        // Generate a Blob URL\n        return URL.createObjectURL(blob);\n    }\n}\n\nexport default PDFToImagesConverter;\n","/* eslint-disable max-len */\nimport { TransCategory } from '../../utils/trans-category';\nimport PDFToImagesConverter from '../pdf-to-image';\n\ntype RequestRedirect = 'follow' | 'error' | 'manual'\n\n// const LLAVA_LLAMA_MODEL = 'llava-llama3';\nconst GEMMA3_MODEL = 'gemma3:latest';\nconst QWEN25_3B_MODEL = 'qwen2.5:3b';\nconst LLM_MODEL = GEMMA3_MODEL;\n\nexport type OllamaApiResponse = {\n    model: string;\n    created_at: string;\n    message: {\n      role: string;\n      content: string;\n    };\n    done_reason: string;\n    done: boolean;\n    total_duration: number;\n    load_duration: number;\n    prompt_eval_count: number;\n    prompt_eval_duration: number;\n    eval_count: number;\n    eval_duration: number;\n  };\nconst Ollama = {\n    getVision: async (imageURL: string): Promise<OllamaApiResponse | null> => {\n        const body = await Ollama.getVisionRequestBody(imageURL);\n        const requestOptions = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            redirect: 'follow' as RequestRedirect,\n        };\n        try {\n            const response = await fetch('http://localhost:11434/api/chat', requestOptions);\n            console.log(response);\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching vision:', error);\n            return null;\n        }\n    },\n    getCategory: async (data: any): Promise<OllamaApiResponse | null> => {\n        const categoryList = Object.values(TransCategory);\n        const body = await Ollama.getCatRequestBody(data, categoryList);\n        const requestOptions = {\n            method: 'POST',\n            body: JSON.stringify(body),\n            redirect: 'follow' as RequestRedirect,\n        };\n        try {\n            const response = await fetch('http://localhost:11434/api/chat', requestOptions);\n            console.log(response);\n            return response.json();\n        } catch (error) {\n            console.error('Error fetching vision:', error);\n            return null;\n        }\n    },\n    getCatRequestBody: async(data: string, categoryList: string[]) => {\n        const categories = categoryList.join(', ');\n        return {\n            model: QWEN25_3B_MODEL,\n            messages: [\n                {\n                    role: 'system', // \"system\" is a prompt to define how the model should act.\n                    content: 'You are categorizer of bills. Your output should be in JSON format. { category: string }',\n                },\n                {\n                    role: 'user', // \"user\" is a prompt provided by the user.\n                    content: `Followng is the list of categories.\n${categories}\nBased the following description of the bill, figure out the category.\nDescription: ${data}`,\n                },\n            ],\n            stream: false, // returns as a full message rather than a streamed response\n        };\n    },\n    getVisionRequestBody: async (imageURL: string) => {\n        const categories = Object.values(TransCategory).join(', ');\n        const dataURIs: string[] = [];\n        const dataURI: string = await Ollama.urlToBase64(imageURL) as string;\n        if (dataURI.startsWith('data:application/pdf;base64,')) {\n            const converter = new PDFToImagesConverter();\n            const pdfImages: any = await converter.convert(imageURL);\n            if (pdfImages?.length) {\n                const base64Images: any[] = await Promise.all(\n                    pdfImages.map(async (img: string) => {\n                        const imageURI = img.replace(/data:.+;base64,/, '');\n                        // console.log('Image URI: ', img);\n                        return imageURI;\n                    }),\n                );\n                dataURIs.push(...base64Images);\n            }\n        } else {\n            console.log('Data URI: ', dataURI);\n            dataURIs.push(dataURI.replace(/data:.+;base64,/, ''));\n        }\n        return {\n            model: LLM_MODEL,\n            stream: false,\n            options: {\n                seed: 101,\n                temperature: 0.1,\n            },\n            format: {\n                type: 'object',\n                properties: {\n                    date: {\n                        type: 'string',\n                    },\n                    description: {\n                        type: 'string',\n                    },\n                    amount: {\n                        type: 'integer',\n                    },\n                    cash: {\n                        type: 'boolean',\n                    },\n                    category: {\n                        type: 'string',\n                    },\n                },\n                required: [\n                    'date',\n                    'amount',\n                    'cash',\n                    'description',\n                ],\n            },\n            messages: [\n                {\n                    role: 'user',\n                    content: `What text do you read in this image? Fetch data like Amount, Date, is Cash or Cheque transaction and Description.\nDefault is cash transaction unless the word 'cheque' found.\nDate: Date format should be 'dd/mm/yyyy'. If the year is not found, use the current year. If day is not found, use '01' as day. If month is not found, use '03' as month.\nFollowng is the list of categories. ${categories}\nFigure out the category based on the image input.`,\n                },\n                {\n                    role: 'user',\n                    images: dataURIs,\n                },\n            ],\n        };\n    },\n    urlToBase64: async (imageUrl: string) => {\n        try {\n            const response = await fetch(imageUrl);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch image: ${response.statusText}`);\n            }\n            const blob = await response.blob();\n            return await Ollama.blobToBase64(blob);\n        } catch (error) {\n            console.error('Error converting URL to Base64:', error);\n            throw error;\n        }\n    },\n    blobToBase64: (blob: Blob) => new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(blob);\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n    }),\n\n};\n\nexport default Ollama;\n","import {\n    GoogleGenerativeAI,\n    HarmCategory,\n    HarmBlockThreshold,\n} from '@google/generative-ai';\nimport { getConfig } from '../../index';\n\nexport type ProcessedData = {\n    amount: number;\n    date: string;\n    description: string;\n    isChequeIssued: boolean;\n}\n\nexport class Gemini {\n    private readonly chat;\n    private inProgress = false;\n    private initProm: Promise<any> | undefined;\n\n    public constructor() {\n        const MODEL_NAME = 'gemini-1.0-pro';\n        const API_KEY = getConfig().geminiKey || '';\n        const genAI = new GoogleGenerativeAI(API_KEY);\n        const model = genAI.getGenerativeModel({ model: MODEL_NAME });\n        const generationConfig = {\n            temperature: 0.9,\n            topK: 0,\n            topP: 1,\n            maxOutputTokens: 2048,\n        };\n        const safetySettings = [\n            {\n                category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n            },\n            {\n                category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n            },\n            {\n                category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n            },\n            {\n                category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n                threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n            },\n        ];\n        // eslint-disable-next-line max-len, quotes\n        const systemInstruction = `You are a bill/receipt data extractor. You have to extract the date (dd-mm-YYYY), amount (in number format), description (in short) and isChequeIssued (is cheque issued?). Expect the following date formats as input 'dd-mm-YYYY', 'dd-mm-YY', 'dd/mm/YYYY' and 'dd/mm/YY'. Also sometimes date delimter has been miss-interperated as numberical one. Ex. 25/7124 can be interperated as 25/7/24 which is of format, 'dd/mm/YY'. Also expect multiple numbers, provide the largest number as amount. Don't expect amount to be larger than 6 digits. Also expect the whole input in tabular format separated by newlines and tabs. The whole data is a bill information. If it is electricity bill, Description should be 'Electricity bill'. If it is a BWSSB or Water bill, the description should be BWSSB. Don't use text havig word 'Total' as description. If input is a bill of items purchased, find the reason like 'Motor repair'. If not found, say 'Items Purchased' followed by a line item.`;\n        this.chat = model.startChat({\n            generationConfig,\n            safetySettings,\n            // systemInstruction, // This option is not working as expected\n        });\n        this.initChat(systemInstruction);\n    }\n\n    public async initChat(msg?: string) {\n        this.inProgress = true;\n        const message = `Following is the context for future chat messages.\\n${msg}`;\n        this.initProm = this.chat.sendMessage(message);\n    }\n\n    public async extractData(text: string) : Promise<ProcessedData> {\n        if (this.inProgress) {\n            await this.initProm;\n            this.inProgress = false;\n        }\n        try {\n            // eslint-disable-next-line max-len\n            const result = await this.chat.sendMessage(`What is the date (dd-mm-YYYY), amount (in number format), description (in short) and isChequeIssued (is cheque issued?)', extracted from the following text (comes after new line) in JSON format?\\n${text}`);\n            const { response } = result;\n            const parsedString = response.text().replace(/```/g, '').replace(/JSON/gi, '');\n            const parsedData = JSON.parse(parsedString);\n            const data = Array.isArray(parsedData) ? parsedData[0] : parsedData;\n            return {\n                date: data.date || data.Date,\n                description: data.description || data.Description,\n                amount: data.amount || data.Amount,\n                isChequeIssued: typeof data.isChequeIssued !== 'undefined' ? data.isChequeIssued : data.IsChequeIssued,\n            };\n        } catch (e) {\n            console.log(e);\n        }\n        return { amount: 0, date: '', description: '', isChequeIssued: false };\n    }\n\n    static instance: Gemini;\n\n    static getInstance() {\n        if (!Gemini.instance) {\n            Gemini.instance = new Gemini();\n        }\n        return Gemini.instance;\n    }\n}\nexport default async function extractData(text: string) : Promise<ProcessedData> {\n    const MODEL_NAME = 'gemini-1.0-pro';\n    const API_KEY = getConfig().geminiKey || '';\n    const genAI = new GoogleGenerativeAI(API_KEY);\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\n\n    const generationConfig = {\n        temperature: 0.9,\n        topK: 0,\n        topP: 1,\n        maxOutputTokens: 2048,\n    };\n\n    const safetySettings = [\n        {\n            category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n            category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n            category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n        {\n            category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n            threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\n        },\n    ];\n    // const systemInstruction = 'You are a bill data extractor. Extract the data and output it in JSON Format';\n    const chat = model.startChat({\n        generationConfig,\n        safetySettings,\n        // systemInstruction, // This option is not working as expected\n    });\n    try {\n        // eslint-disable-next-line max-len\n        const result = await chat.sendMessage(`What is the date (dd-mm-YYYY), amount (in number format), description (in short) and isChequeIssued (is cheque issued?)', extracted from the following text (comes after new line) in JSON format? Expect the following date formats as input 'dd-mm-YYYY', 'dd-mm-YY', 'dd/mm/YYYY' and 'dd/mm/YY'. Also sometimes date delimter has been miss-interperated as numberical one. Ex. 25/7124 can be interperated as 25/7/24 which is of format, 'dd/mm/YY'. Also expect multiple numbers, provide the largest number as amount. Don't expect amount to be larger than 6 digits. Also expect the whole input in tabular format separated by newlines and tabs. The whole data is a bill information. If it is electricity bill, Description should be 'Electricity bill'. If it is a BWSSB or Water bill, the description should be BWSSB. Don't use text havig word 'Total' as description. If input is a bill of items purchased, find the reason like 'Motor repair'. If not found, say 'Items Purchased' followed by a line item. Text Goes here.\\n${text}`);\n        const { response } = result;\n        const parsedString = response.text().replace(/```/g, '').replace(/JSON/gi, '');\n        const parsedData = JSON.parse(parsedString);\n        return Array.isArray(parsedData) ? parsedData[0] : parsedData;\n    } catch (e) {\n        console.log(e);\n    }\n    return { amount: 0, date: '', description: '', isChequeIssued: false };\n}\n","/* eslint-disable max-len */\nimport React from 'react';\nimport moment from 'moment';\nimport { fetchFilesFromFolder } from '../../services/googleapis/drive-util';\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\nimport { ExpenseState, GoogleDriveFile } from './expense-types';\nimport TransMapExecutor from '../../utils/trans-map-executor';\nimport { TransCategory } from '../../utils/trans-category';\nimport catMapJson from '../../services/cat-map/cat-map';\nimport { parseExpenseInfo } from '../../services/ocr/parser-utils';\nimport { getVision as getOCRVision } from '../../services/ocr';\nimport Ollama, { OllamaApiResponse } from '../../services/ollama';\nimport { Gemini, ProcessedData } from '../../services/googleapis/gemini';\nimport { TransactionType } from '../../services/redux/transactions/trans-types';\nimport { getConfig } from '../../services';\n\nconst USE_OLLAMA = true;\n\nexport function fetchFiles(\n    setFilesList: React.Dispatch<React.SetStateAction<GoogleDriveFile[]>>,\n    folderId: string = '',\n) {\n    fetchFilesFromFolder(folderId).then((files) => {\n        setFilesList(files);\n    });\n}\n\nexport const saveOnlineTransSheet = async (data: any, sheetTitle = 'Online Transactions') => {\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\n    if (!sheet) {\n        await gsheetUtil.addSheet({\n            headerValues: [\n                'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat', 'Bill',\n            ],\n            title: sheetTitle,\n        });\n    }\n    const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\n        row.Date = moment(row.Date).format('DD-MM-YYYY');\n        return row;\n    });\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\n    return true;\n};\n\nexport const saveOnlineTransactionWithBill = async (data: ExpenseState, fileId: string) => {\n    await searchUpdateOnlineTransWithBills(data.date, data.amount, data.category || '', getDriveFileURL(fileId));\n};\n\nexport async function searchUpdateOnlineTransWithBills(\n    date: any,\n    debit: any,\n    category: string,\n    billURL: string,\n) {\n    let searchColumns: Record<string, any> = {\n        Date: date,\n        Debit: debit,\n        Category: category,\n    };\n    try {\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\n    } catch (e) {\n        searchColumns = {\n            Debit: debit,\n            Category: category,\n        };\n        await gsheetUtil.searchUpdateRecord('Online Transactions', searchColumns, 'Bill', billURL);\n    }\n}\n\nexport const saveCashTransSheet = async (data: any, sheetTitle = 'Cash Transactions') => {\n    const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\n    if (!sheet) {\n        await gsheetUtil.addSheet({\n            headerValues: [\n                'Date',\n                'Description',\n                'Item Description/Purpose',\n                'Qty',\n                'Price',\n                'Debit',\n                'Credit',\n                'Total',\n                'Category',\n                'Flat',\n                'Bill',\n            ],\n            title: sheetTitle,\n        });\n    }\n    const sheetData = JSON.parse(JSON.stringify(data));\n    await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\n    return true;\n};\n\nexport const getDriveFileURL = (fileId: string) => `https://drive.google.com/file/d/${fileId}/preview`;\n\nexport const getDataInSheetFormat = (data: ExpenseState, selectedBill?: string) => {\n    const out: TransactionType = {\n        Date: data.date ?? '',\n        Description: data.description ?? '',\n        Debit: data.amount ?? 0,\n        Credit: 0,\n        Category: data.category as TransCategory,\n        Total: 0,\n    };\n    if (selectedBill) {\n        out.Bill = getDriveFileURL(selectedBill);\n    }\n    return out;\n};\n\nexport const setCategory = (data: ExpenseState, longDescription?: string) => {\n    const category = Ollama.getCategory(data);\n    const value: TransactionType = getDataInSheetFormat(data);\n    if (!value.Description && longDescription) {\n        value.Description = longDescription;\n    }\n    const transMapExec = new TransMapExecutor(catMapJson as any);\n    transMapExec.run([value] as TransactionType[]);\n    data.category = value.Category;\n    if (!data.description && data.category) {\n        data.description = data.category;\n    }\n};\n\nconst BillDataCache: { [cacheKey: string]: any } = {};\n\nexport function extractBillData(\n    fileName: string | undefined,\n    bill: GoogleDriveFile,\n): Promise<ExpenseState> {\n    let data: ExpenseState = {};\n    const promise = new Promise<ExpenseState>((resolve) => {\n        if (fileName && fileName.indexOf('_') > -1) {\n            data = parseExpenseInfo(fileName);\n        }\n        if (!data.amount || !data.date || !data.description) {\n            if (BillDataCache[bill.id]) {\n                resolve(BillDataCache[bill.id]);\n            } else {\n                const { googleAPIKey: apiKey } = getConfig();\n                // const fileUrl = `https://drive.usercontent.google.com/download?id=${bill.id}`;\n                const fileUrl = `https://www.googleapis.com/drive/v2/files/${bill.id}?key=${apiKey}&alt=media&source=downloadUrl`;\n                const getFunc = USE_OLLAMA ? Ollama.getVision.bind(Ollama) : getOCRVision;\n                const visionHandler = USE_OLLAMA\n                    ? handleOllamaResponse\n                    : handleOCRSpaceResponse;\n                getVisionRetry(fileUrl, getFunc).then(async (response: any) => {\n                    const parsedFormData = await visionHandler(response, data);\n                    BillDataCache[bill.id] = parsedFormData;\n                    resolve(parsedFormData);\n                });\n            }\n        } else {\n            const parsedFormData = ({\n                ...data,\n            });\n            resolve(parsedFormData);\n        }\n    });\n    return promise;\n}\nconst handleOllamaResponse = async (response: OllamaApiResponse) => {\n    const parsedResp = JSON.parse(response.message.content);\n    const data: ExpenseState = JSON.parse(response.message.content);\n    if (!data.date || data.date.length !== 10) {\n        data.date = '01-01-2024';\n    }\n    data.isChequeIssued = !parsedResp.cash;\n    if (!data.category) {\n        const catResp = await Ollama.getCategory(parsedResp.description);\n        if (catResp) {\n            data.category = JSON.parse(response.message.content).category;\n        }\n    }\n    return Promise.resolve(data);\n};\nconst handleOCRSpaceResponse = async (response: any, data: ExpenseState) => {\n    let parsedFormData: ExpenseState;\n    if (response?.data?.ParsedResults) {\n        const parsedText = response.data.ParsedResults[0]?.ParsedText || '';\n        const parsedData: ProcessedData = await Gemini.getInstance().extractData(parsedText);\n        parsedFormData = {\n            ...parsedData,\n            isChequeIssued:\n                (typeof parsedData.isChequeIssued === 'boolean') ?\n                    parsedData.isChequeIssued : parsedData.isChequeIssued === 'true',\n        };\n        setCategory(parsedFormData, parsedText!.toLowerCase());\n    } else {\n        parsedFormData = ({\n            ...data,\n        });\n        setCategory(parsedFormData);\n    }\n    return parsedFormData;\n};\nconst getVisionRetry = (url: string, getVision: (url: string) => any, RETRY_COUNT = 3) => {\n    const promise = new Promise((resolve, reject) => {\n        getVision(url).then(async (response: any) => {\n            RETRY_COUNT -= 1;\n            if (response || RETRY_COUNT === 0) {\n                resolve(response);\n            } else if (!response) {\n                const resp = await getVisionRetry(url, getVision, RETRY_COUNT);\n                resolve(resp);\n            }\n        });\n    });\n    return promise;\n};\n\nexport default { fetchFiles, saveCashTransSheet, saveOnlineTransSheet };\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {\n    // Checkbox,\n    TableCell,\n    TableRow,\n    TextField,\n    IconButton,\n    Switch,\n    MenuItem,\n    Select,\n    Tooltip,\n} from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport SyncIcon from '@mui/icons-material/Sync';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport dayjs from 'dayjs';\nimport { BillTransactionType } from './bill-table';\nimport { ExpenseState, GoogleDriveFile } from './expense-types';\nimport { extractBillData } from './bill-utils';\nimport { CatItem } from '../../services/service-types';\nimport './bill-row.css';\n\ninterface BillRowProps {\n    transaction: BillTransactionType;\n    expenseCategories: CatItem[];\n    callback: (state: ExpenseState) => void;\n    previewBill: (event: React.MouseEvent<HTMLButtonElement>, bill: GoogleDriveFile) => void;\n}\n\nconst BillRow: React.FC<BillRowProps> = ({ transaction, previewBill, expenseCategories, callback }) => {\n    const [showLoader, setShowLoader] = useState(false);\n    const [formData, setFormData] = useState(transaction);\n    const [formCompleted, setFormCompleted] = useState(false);\n    const fetch = useCallback(async () => {\n        setShowLoader(true);\n        const parsedFormData = await extractBillData('', transaction.bill);\n        setFormData({\n            ...transaction,\n            ...parsedFormData,\n            isCash: !parsedFormData.isChequeIssued,\n        } as any);\n        setShowLoader(false);\n    }, [transaction]);\n    const [errorData, setErrorData] = useState({\n        date: '',\n        amount: '',\n        description: '',\n        category: '',\n        transactionType: '',\n    });\n\n    const handleChange = useCallback((event: any) => {\n        const { name, value } = event.target || event;\n        setFormData((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    }, []);\n\n    const handleSubmit = useCallback(() => {\n        let error = false;\n        if (!formData.amount) {\n            errorData.amount = 'Enter a valid amount';\n            error = true;\n        } else {\n            errorData.amount = '';\n        }\n        if (!formData.date || formData.date.toLowerCase() === 'invalid date') {\n            errorData.date = 'Enter a valid date';\n            error = true;\n        } else {\n            errorData.date = '';\n        }\n        if (!formData.description) {\n            errorData.description = 'Enter a valid description';\n            error = true;\n        } else {\n            errorData.description = '';\n        }\n        if (!formData.category) {\n            errorData.category = 'Select a category';\n            error = true;\n        } else {\n            errorData.category = '';\n        }\n        if (error) {\n            setErrorData({ ...errorData });\n        } else {\n            const formDataClone = JSON.parse(JSON.stringify(formData));\n            callback(formDataClone);\n            setFormCompleted(true);\n        }\n    }, [callback, errorData, formData]);\n    useEffect(() => {\n        if (!formData.date) {\n            const date = '01-04-2024';\n            setFormData({ ...formData, date });\n        }\n    }, [formData, formData.date]);\n    return (\n        <>\n            <TableRow key={formData.bill.id} className={formCompleted ? 'form-completed bill-row' : 'bill-row'}>\n                {/* <TableCell>\n                    <Checkbox onChange={handleChange} name=\"enable\" value />\n                </TableCell> */}\n                <TableCell>\n                    <IconButton\n                        disabled={showLoader}\n                        onMouseEnter={(e) => previewBill(e, transaction.bill)}\n                    >\n                        <OpenInNewIcon />\n                    </IconButton>\n                </TableCell>\n                <TableCell className={errorData.date ? 'cell-error' : ''}>\n                    <Tooltip title={errorData.date}>\n                        <div className=\"date-wrapper\">\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                <DatePicker\n                                    disabled={showLoader}\n                                    format=\"DD-MM-YYYY\"\n                                    closeOnSelect\n                                    value={dayjs(moment(formData.date, 'DD-MM-YYYY').format('YYYY-MM-DD'))}\n                                    onChange={(e: any) => handleChange({ value: e.format('DD-MM-YYYY'), name: 'date' })}\n                                />\n                            </LocalizationProvider>\n                        </div>\n                    </Tooltip>\n                </TableCell>\n                <TableCell className={errorData.description ? 'cell-error' : ''}>\n                    <Tooltip title={errorData.description}>\n                        <TextField\n                            name=\"description\"\n                            disabled={showLoader}\n                            value={formData.description}\n                            onChange={handleChange} // Handle change accordingly\n                            fullWidth\n                        />\n                    </Tooltip>\n                </TableCell>\n                <TableCell className={errorData.amount ? 'cell-error' : ''}>\n                    <Tooltip title={errorData.amount}>\n                        <TextField\n                            name=\"amount\"\n                            type=\"number\"\n                            disabled={showLoader}\n                            value={formData.amount}\n                            onChange={handleChange}\n                            fullWidth\n                        />\n                    </Tooltip>\n                </TableCell>\n                <TableCell className={errorData.category ? 'cell-error' : ''}>\n                    <Tooltip title={errorData.category}>\n                        <Select\n                            className=\"bill-category\"\n                            fullWidth\n                            disabled={showLoader}\n                            name=\"category\"\n                            value={formData.category}\n                            onChange={handleChange}\n                        >\n                            {expenseCategories.map((cat) => (\n                                <MenuItem key={cat.key} value={cat.key}>{cat.label}</MenuItem>\n                            ))}\n                        </Select>\n                    </Tooltip>\n                </TableCell>\n                <TableCell>\n                    <Switch\n                        name=\"isCash\"\n                        disabled={showLoader}\n                        checked={!!formData.isCash}\n                        value\n                        onClick={() => handleChange({ name: 'isCash', value: !formData.isCash })}\n                    />\n                </TableCell>\n                <TableCell>\n                    {!showLoader && (\n                        <IconButton\n                            disabled={showLoader || formCompleted}\n                            aria-label=\"fetch\"\n                            onClick={fetch}\n                        >\n                            <SyncIcon />\n                        </IconButton>\n                    )}\n                    <IconButton\n                        disabled={showLoader || formCompleted}\n                        aria-label=\"submit\"\n                        onClick={handleSubmit}\n                    >\n                        <SendIcon />\n                    </IconButton>\n\n                </TableCell>\n            </TableRow>\n            {showLoader && (\n                <TableRow className=\"loader-row\">\n                    <LinearProgress color=\"success\" />\n                </TableRow>\n            )}\n        </>\n    );\n};\n\nexport default BillRow;\n","import React from 'react';\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    Popover,\n    Button,\n} from '@mui/material';\nimport { ExpenseState, GoogleDriveFile } from './expense-types';\nimport {\n    getDriveFileURL,\n} from './bill-utils';\nimport BillRow from './bill-row';\nimport { CatItem } from '../../services/service-types';\nimport './bill-table.css';\n\n// Define the type for bill transaction\nexport type BillTransactionType = {\n    date: string;\n    description: string;\n    amount: number;\n    category: string;\n    isCash: boolean;\n    bill: GoogleDriveFile;\n};\n\ninterface BillTransactionTableProps {\n    transactions: BillTransactionType[];\n    expenseCategories: CatItem[];\n    handleSubmit: (bill?: ExpenseState, billId?: string) => void;\n    handleSplit: (bill: GoogleDriveFile) => void;\n}\n\nconst BillTransactionTable: React.FC<BillTransactionTableProps> = (\n    { transactions, expenseCategories, handleSubmit, handleSplit }) => {\n    const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n    const [previewBill, setPreviewBill] = React.useState<GoogleDriveFile>();\n    const onMouseEnter = (event: React.MouseEvent<HTMLButtonElement>, bill: GoogleDriveFile) => {\n        setPreviewBill(bill);\n        setAnchorEl(event.currentTarget);\n    };\n\n    const onMouseLeave = () => {\n        setAnchorEl(null);\n        setPreviewBill(undefined);\n    };\n\n    const open = Boolean(anchorEl);\n    const id = open ? 'simple-popover' : undefined;\n    return (\n        <>\n            {transactions.length === 1 && (\n                <Button\n                    className=\"split-all\"\n                    aria-label=\"split\"\n                    onClick={() => handleSplit(transactions[0].bill)}\n                    size=\"small\"\n                >\n                    Split the Bill\n                </Button>\n            )}\n            <TableContainer component={Paper}>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            {/* <TableCell>#</TableCell> */}\n                            <TableCell>Bill Preview</TableCell>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Description</TableCell>\n                            <TableCell>Amount</TableCell>\n                            <TableCell>Category</TableCell>\n                            <TableCell>Is Cash</TableCell>\n                            <TableCell>Action</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {transactions.map((transaction) => (\n                            <BillRow\n                                key={transaction.bill.id}\n                                previewBill={onMouseEnter}\n                                transaction={transaction}\n                                expenseCategories={expenseCategories}\n                                callback={(data) => handleSubmit(data, transaction.bill.id)}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n                {!!previewBill && (\n                    <Popover\n                        id={id}\n                        open={open}\n                        anchorEl={anchorEl}\n                        onClose={onMouseLeave}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                    >\n                        <iframe\n                            className=\"expense-bill-img\"\n                            src={getDriveFileURL(previewBill.id)}\n                            title=\"Expense Bill\"\n                        />\n                    </Popover>\n                )}\n            </TableContainer>\n        </>\n    );\n};\n\nexport default BillTransactionTable;\n","/* eslint-disable react/react-in-jsx-scope */\nimport React, { useCallback, useState } from 'react';\nimport moment from 'moment';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    FormControl,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    FormHelperText,\n    TextField,\n    InputLabel,\n    Select,\n    DialogActions,\n    Button,\n    MenuItem,\n} from '@mui/material';\nimport { ExpenseFormProps, ExpenseState } from './expense-types';\nimport './expense.css';\nimport { getDriveFileURL } from './bill-utils';\n\nconst ExpenseForm = ({\n    callback, date, amount, description, category, image, handleClose, expenseCategories, mimeType, isChequeIssued,\n}: ExpenseFormProps) => {\n    const [formData, setData] = useState<ExpenseState>({\n        date: moment(date ?? '01-04-2024', 'DD-MM-YYYY').format('YYYY-MM-DD'),\n        amount: amount ?? 0,\n        description: description ?? 'text',\n        category: category ?? '',\n        isChequeIssued,\n    });\n\n    const [errorData, setErrorData] = useState({\n        date: '',\n        amount: '',\n        description: '',\n        category: '',\n        transactionType: '',\n    });\n\n    const handleChange = useCallback((event: any) => {\n        const { name, value } = event.target;\n        setData((prev) => ({\n            ...prev,\n            [name]: value,\n        }));\n    }, []);\n\n    const handleSubmit = useCallback(() => {\n        let error = false;\n        if (!formData.amount) {\n            errorData.amount = 'Enter a valid amount';\n            error = true;\n        }\n        if (!formData.date || formData.date.toLowerCase() === 'invalid date') {\n            errorData.date = 'Enter a valid date';\n            error = true;\n        }\n        if (!formData.description) {\n            errorData.description = 'Enter a valid description';\n            error = true;\n        }\n        if (!formData.category) {\n            errorData.category = 'Select a category';\n            error = true;\n        }\n        if (error) {\n            setErrorData({ ...errorData });\n        } else {\n            const formDataClone = JSON.parse(JSON.stringify(formData));\n            formDataClone.date = moment(formDataClone.date, 'YYYY-MM-DD').format('DD-MM-YYYY');\n            callback(formDataClone);\n        }\n    }, [callback, errorData, formData]);\n\n    return (\n        <div className=\"expense-dialog\">\n            <Dialog open onClose={handleClose} className=\"bill-grid-dialog\" fullWidth scroll=\"paper\" maxWidth=\"xl\">\n                <DialogTitle>Form</DialogTitle>\n                <DialogContent>\n                    {mimeType.startsWith('image/') && (\n                        <iframe\n                            className=\"expense-bill-img\"\n                            src={getDriveFileURL(image)}\n                            title=\"Expense Bill\"\n                        />\n                    )}\n                    {mimeType === 'application/pdf' && (\n                        <embed\n                            className=\"expense-bill-img\"\n                            src={getDriveFileURL(image)}\n                            title=\"Expense Bill\"\n                        />\n                    )}\n                    <form>\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.transactionType}>\n                            <RadioGroup\n                                aria-label=\"Transaction Type\"\n                                name=\"transactionType\"\n                                value={formData.isChequeIssued ? 'Online' : 'Cash'}\n                                onChange={handleChange}\n                                row\n                            >\n                                <FormControlLabel\n                                    value=\"Cash\"\n                                    control={<Radio color=\"primary\" />}\n                                    label=\"Cash\"\n                                />\n                                <FormControlLabel\n                                    value=\"Online\"\n                                    control={<Radio color=\"primary\" />}\n                                    label=\"Online\"\n                                />\n                            </RadioGroup>\n                            {!!errorData.transactionType &&\n                            <FormHelperText>{errorData.transactionType}</FormHelperText>\n                            }\n                        </FormControl>\n                        <TextField\n                            type=\"date\"\n                            name=\"date\"\n                            label=\"Date\"\n                            value={formData.date}\n                            onChange={handleChange}\n                            fullWidth\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            placeholder=\"DD-MM-YYYY\"\n                            error={!!errorData.date}\n                            helperText={errorData.date}\n                        />\n                        <TextField\n                            type=\"number\"\n                            name=\"amount\"\n                            label=\"Amount\"\n                            value={formData.amount}\n                            onChange={handleChange}\n                            fullWidth\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            error={!!errorData.amount}\n                            helperText={errorData.amount}\n                        />\n                        <TextField\n                            type=\"text\"\n                            name=\"description\"\n                            label=\"Description\"\n                            value={formData.description}\n                            onChange={handleChange}\n                            fullWidth\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            error={!!errorData.description}\n                            helperText={errorData.description}\n                        />\n                        <FormControl variant=\"outlined\" fullWidth margin=\"normal\" error={!!errorData.category}>\n                            <InputLabel>Category</InputLabel>\n                            <Select\n                                name=\"category\"\n                                value={formData.category}\n                                onChange={handleChange}\n                                label=\"Category\"\n                            >\n                                {expenseCategories.map((cat) => (\n                                    <MenuItem key={cat.key} value={cat.key}>{cat.label}</MenuItem>\n                                ))}\n                            </Select>\n                            {!!errorData.category && <FormHelperText>{errorData.category}</FormHelperText>}\n                        </FormControl>\n                    </form>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClose()} color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} color=\"primary\">\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default ExpenseForm;\n","import React from 'react';\nimport { Grid } from '@mui/material';\nimport { GoogleDriveFile } from './expense-types';\n\ntype FolderGridProp = {\n    folders: GoogleDriveFile[];\n    handleClick: (folderId: string, folderName: string) => void;\n};\nconst FolderGrid = ({ folders, handleClick }: FolderGridProp) => {\n    const sortedFolders = folders.length ? customSortByMonth(folders) : [];\n    return (\n        <div>\n            <Grid container spacing={2}>\n                {sortedFolders.map((folder, index) => (\n                    <Grid item key={`Image ${index + 1}`} xs={2} onClick={() => handleClick(folder.id, folder.name)}>\n                        <img\n                            src=\"/images/folder.jpg\"\n                            id={`folder-${folder.name}`}\n                            alt={`Folder ${index + 1}`}\n                            style={{ width: 200, height: 200, cursor: 'pointer', padding: '5px' }}\n                        />\n                        <h3 style={{ textAlign: 'center' }}>{folder.name}</h3>\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    );\n};\n\nfunction customSortByMonth(arr: GoogleDriveFile[]) {\n    const monthMap: any = {\n        APR: 1,\n        MAY: 2,\n        JUN: 3,\n        JUL: 4,\n        AUG: 5,\n        SEP: 6,\n        OCT: 7,\n        NOV: 8,\n        DEC: 9,\n        JAN: 10,\n        FEB: 11,\n        MAR: 12,\n    };\n\n    // Custom sort function\n    arr.sort((a: GoogleDriveFile, b: GoogleDriveFile) => {\n        const monthA = monthMap[a.name.toUpperCase()];\n        const monthB = monthMap[b.name.toUpperCase()];\n        return monthA - monthB;\n    });\n\n    return arr;\n}\n\nexport default FolderGrid;\n","import { GoogleSpreadsheet, GoogleSpreadsheetWorksheet } from 'google-spreadsheet';\nimport moment from 'moment';\nimport { getConfig } from '..';\nimport gsheetUtil from '../googleapis/gsheet-util-impl';\nimport { CatItem, MonthlySheetDataType, Transaction } from '../service-types';\n\nexport interface Sheet {\n    getExpenseCategories(): Promise<CatItem[]>;\n    getMonthData(monthSheet: string): Promise<Transaction[]>;\n    setMonthData(monthSheet: string): Promise<boolean>;\n}\nconst EXP_STOP_ROW_VAL = 'Total Expense';\nconst CAT_COLUMN = 0;\nconst SUMMARY_SHEET = 'Summary';\nconst MONTHS_SHORT_TXT = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nexport class TransSheet implements Sheet {\n    private initProm: Promise<GoogleSpreadsheet>;\n    private sheetIntialized = false;\n    private sheets: Map<string, GoogleSpreadsheetWorksheet> = new Map<string, GoogleSpreadsheetWorksheet>();\n\n    constructor() {\n        this.initProm = gsheetUtil.init();\n        this.initProm.then(() => {\n            this.sheetIntialized = true;\n        });\n    }\n\n    private async getSheet(sheetTitle: string) {\n        if (!this.sheetIntialized) {\n            await this.initProm;\n        }\n        return new Promise<GoogleSpreadsheetWorksheet>((resolve, reject) => {\n            if (this.sheets.has(sheetTitle)) {\n                resolve(this.sheets.get(sheetTitle) as GoogleSpreadsheetWorksheet);\n            } else {\n                gsheetUtil.getSheetByTitle(sheetTitle).then((sheet) => {\n                    if (sheet) {\n                        this.sheets.set(sheetTitle, sheet);\n                        resolve(sheet);\n                    } else {\n                        reject();\n                    }\n                });\n            }\n        });\n    }\n\n    public async getExpenseCategories() {\n        return new Promise<CatItem[]>((resolve, reject) => {\n            let result: CatItem[] = [];\n            this.getSheet(SUMMARY_SHEET).then((sheet) => {\n                const sheetCol = gsheetUtil.getColumnWithSheet(sheet, CAT_COLUMN);\n                const expList = sheetCol.map((col) => col.value);\n                const filteredExpList = [];\n                for (let i = 1; i < expList.length - 1; i += 1) {\n                    if (expList[i] !== EXP_STOP_ROW_VAL) {\n                        filteredExpList.push(expList[i]);\n                        result = filteredExpList.map((expense: any) => ({\n                            key: expense,\n                            label: expense,\n                        }));\n                    } else {\n                        break;\n                    }\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    private async parseMonthlySheet(sheet: GoogleSpreadsheetWorksheet) {\n        const rows = await sheet.getRows();\n        const out: Transaction[] = rows.map((row) => ({\n            Date: moment(row.Date, 'DD/MM/YYYY').toDate(),\n            Description: row.Desc,\n            'Cheque No': row.ChqNo,\n            Debit: parseFloat(row.Amount) < 0 ? parseFloat(row.Amount) : 0,\n            Credit: parseFloat(row.Amount) >= 0 ? parseFloat(row.Amount) : 0,\n            Total: parseFloat(row.Balance),\n            type: row.Type,\n        }));\n        return out;\n    }\n\n    public getMonthData(monthSheet: string) {\n        return new Promise<Transaction[]>((resolve, reject) => {\n            this.getSheet(monthSheet).then(async (sheet) => {\n                const result = await this.parseMonthlySheet(sheet);\n                resolve(result);\n            }).catch(() => {\n                gsheetUtil.addSheet({\n                    headerValues: [\n                        'Date', 'Desc', 'ChqNo', 'Amount', 'Type', 'Balance',\n                    ],\n                    title: monthSheet,\n                }).then((sheet) => {\n                    this.sheets.set(monthSheet, sheet);\n                    resolve([]);\n                });\n            });\n        });\n    }\n\n    private pushSheetData(trans: Transaction, rows: MonthlySheetDataType[]) {\n        rows.push({\n            Date: moment(trans.Date).format('DD-MM-YYYY'),\n            Desc: trans.Description,\n            Balance: trans.Total,\n            Amount: trans.Credit - trans.Debit,\n            ChqNo: trans['Cheque No'],\n            Type: trans.type,\n        });\n    }\n\n    private transCompare(sheetData: Transaction, fileData: Transaction) {\n        return (\n            moment(sheetData.Date).format('DD/MM/YYY') === moment(fileData.Date).format('DD/MM/YYY') &&\n            sheetData.Description === fileData.Description &&\n            sheetData.Debit === fileData.Debit &&\n            sheetData.Credit === fileData.Credit &&\n            sheetData.type === fileData.type\n        );\n    }\n\n    private async mergeSheetData(sheet: GoogleSpreadsheetWorksheet, sheetData: Transaction[]) {\n        const { transactions } = getConfig().appData;\n        const rows: MonthlySheetDataType[] = [];\n        if (sheetData.length > 0) {\n            transactions.forEach((trans) => {\n                const fIndex = sheetData.findIndex((sData) => this.transCompare(sData, trans));\n                if (fIndex === -1) {\n                    this.pushSheetData(trans, rows);\n                }\n            });\n            sheetData.forEach((sheetTrans) => {\n                const fIndex = transactions.findIndex((fileData) => this.transCompare(fileData, sheetTrans));\n                if (fIndex === -1) {\n                    transactions.push(sheetTrans);\n                }\n            });\n        } else {\n            transactions.forEach((trans) => this.pushSheetData(trans, rows));\n        }\n        if (rows.length) {\n            await sheet.addRows(rows);\n        }\n        return true;\n    }\n\n    public async setMonthData(monthSheet: string) {\n        const fetchedData = await this.getMonthData(monthSheet);\n        const sheet = await this.getSheet(monthSheet);\n        await this.mergeSheetData(sheet, fetchedData);\n        return true;\n    }\n}\n\nexport default new TransSheet();\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { CircularProgress, IconButton } from '@mui/material';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { VERIFIED_FILE_PREFIX, renameFile } from '../../services/googleapis/drive-util';\nimport BillTable, { BillTransactionType } from './bill-table';\nimport ExpenseForm from './expense';\nimport { ExpenseState, GoogleDriveFile } from './expense-types';\nimport {\n    extractBillData, fetchFiles, getDataInSheetFormat, saveCashTransSheet, saveOnlineTransactionWithBill,\n} from './bill-utils';\nimport FolderGrid from './folder-grid';\nimport { TransSheet } from '../../services/sheet';\nimport { CatItem } from '../../services/service-types';\nimport './new-bills.css';\n\nexport default function NewBills() {\n    const [month, setMonth] = useState('');\n    const [showLoader, setShowLoader] = useState(false);\n    const [fileList, setFilesList] = useState<GoogleDriveFile[]>([]);\n    const [openDialog, setOpenDialog] = useState(false);\n    const [selectedBill, setSelectedBill] = useState<GoogleDriveFile>();\n    const [selectedFolder, setSelectedFolder] = useState('');\n    const [formData, setFormData] = useState<ExpenseState>({\n        date: '',\n        amount: 0,\n        description: '',\n        category: '',\n    });\n    const handleFolderClick = useCallback((folderId: string, folderName: string) => {\n        setMonth(folderName);\n        setSelectedFolder(folderId);\n    }, []);\n    const handleClick = useCallback(async (image: GoogleDriveFile) => {\n        setSelectedBill(image);\n        setShowLoader(true);\n        const fileInfo = fileList.find((file) => file.id === image.id);\n        const fileName = fileInfo?.name;\n        const parsedFormData = await extractBillData(fileName, image);\n        setShowLoader(false);\n        setFormData(parsedFormData);\n        setOpenDialog(true);\n    }, [fileList]);\n\n    const handleSplit = useCallback((bill: GoogleDriveFile) => {\n        // splitAndSaveLocally(bill.id)\n        //     .then(() => console.log('Operation completed successfully.'))\n        //     .catch((error) => console.error('Error:', error));\n    }, []);\n\n    const handleClose = useCallback((data?: ExpenseState, billId?: string) => {\n        const selectedBillId = billId || selectedBill?.id;\n        if (selectedBillId && data?.date) {\n            const fileInfo = fileList.find((file) => file.id === selectedBillId);\n            if (selectedBillId && fileInfo) {\n                renameFile(selectedBillId, fileInfo.name).then(() => {\n                    fetchFiles(setFilesList, selectedFolder);\n                    if (!data.isChequeIssued) {\n                        const finalData = [getDataInSheetFormat(data, selectedBillId)];\n                        saveCashTransSheet(finalData);\n                    } else {\n                        saveOnlineTransactionWithBill(data, selectedBillId);\n                    }\n                });\n            }\n        }\n        setSelectedBill(undefined);\n        setOpenDialog(false);\n    }, [fileList, selectedBill, selectedFolder]);\n\n    useEffect(() => {\n        fetchFiles(setFilesList, selectedFolder);\n    }, [selectedFolder]);\n\n    const [expenseCategories, setExpenseCategories] = useState<CatItem[]>([]);\n    useEffect(() => {\n        (async () => {\n            const transSheet = new TransSheet();\n            const expCat = await transSheet.getExpenseCategories();\n            setExpenseCategories(expCat);\n        })();\n    }, []);\n    const bills = useMemo(() => fileList.filter(\n        (file) => (\n            (file.mimeType.startsWith('image/') ||\n            file.mimeType === 'application/pdf') &&\n            !file.name.startsWith(VERIFIED_FILE_PREFIX)\n        ),\n    ), [fileList]);\n\n    const billsObj: BillTransactionType[] = useMemo(() => bills.map((bill) => ({\n        date: '',\n        description: '',\n        amount: 0,\n        category: '',\n        isCash: true,\n        bill,\n    })), [bills]);\n    const folders = useMemo(() => fileList.filter(\n        (file) => file.mimeType === 'application/vnd.google-apps.folder'), [fileList]);\n\n    const title = useMemo(() => {\n        if (selectedFolder) {\n            return `Unprocessed Bills - ${month}`;\n        }\n        return 'Unprocessed Bills';\n    }, [month, selectedFolder]);\n    return (\n        <div className=\"bill-workspace\">\n            {!!selectedFolder && (\n                <IconButton onClick={() => setSelectedFolder('')} aria-label=\"Back\">\n                    <ArrowBackIcon />\n                </IconButton>\n            )}\n            <h3 className=\"inline-h3\">{title}</h3>\n            {!selectedFolder && <FolderGrid folders={folders} handleClick={handleFolderClick} />}\n            {!!selectedFolder && (\n                <BillTable\n                    handleSubmit={handleClose}\n                    transactions={billsObj}\n                    expenseCategories={expenseCategories}\n                    handleSplit={handleSplit}\n                />\n            )}\n            {!!selectedBill && openDialog && (\n                <ExpenseForm\n                    {...formData}\n                    image={selectedBill.id}\n                    mimeType={selectedBill.mimeType}\n                    callback={handleClose}\n                    handleClose={handleClose}\n                    expenseCategories={expenseCategories}\n                />\n            )}\n            {showLoader && (\n                <div className=\"overlay\">\n                    <CircularProgress />\n                </div>\n            )}\n        </div>\n    );\n}\n\n// TODOS:\n// Testing our logic\n// Date Field Fix\n// Online Transactions Update\n","import React, { useCallback, useState } from 'react';\nimport { FilePicker } from 'react-file-picker';\nimport './index.css';\nimport { Alert } from '@mui/material';\n\nexport type FileUploadProps = {\n    onUpload: (file: File) => void;\n}\nexport const FileUpload = (props: FileUploadProps) => {\n    const [errorMsg, setErrorMsg] = useState<string>();\n    const onUpload = useCallback((fileObject: File) => {\n        props.onUpload(fileObject);\n    }, [props]);\n    const onError = useCallback((errMsg: React.SetStateAction<string | undefined>) => {\n        setErrorMsg(errMsg);\n    }, []);\n    return (\n        <>\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n            <p>Upload a transaction file (.csv or .xls) to process.</p>\n            <div className=\"file-upload-wrapper\">\n                <FilePicker\n                    extensions={['csv', 'xls', 'xlsx']}\n                    onChange={onUpload}\n                    onError={onError}\n                >\n                    <button type=\"button\">Upload</button>\n                </FilePicker>\n            </div>\n        </>\n    );\n};\n\nexport default FileUpload;\n","import XLSX from 'xlsx';\nimport moment from 'moment';\nimport { Transaction } from '../service-types';\n\n// eslint-disable-next-line no-shadow\nexport const XLS_TRANS_KEY_PREFIX = '__EMPTY_';\nexport const xLSTransKeys = {\n    DATE_KEY: '2',\n    DESC_KEY: '5',\n    CHQ_NO_KEY: '9',\n    WITHDRAWAL_KEY: '12',\n    DEPOSIT_KEY: '17',\n    BALANCE_KEY: ['21', '19', '20', '22'],\n};\n\nconst CSV_START_STR = 'TRAN DATE,';\nexport const CsvTransKeys = {\n    DATE_KEY: 'TRAN DATE',\n    DESC_KEY: 'NARRATION',\n    CHQ_NO_KEY: 'CHQ.NO.',\n    WITHDRAWAL_KEY: 'WITHDRAWAL(DR)',\n    DEPOSIT_KEY: 'DEPOSIT(CR)',\n    BALANCE_KEY: 'BALANCE(INR)',\n};\ntype CsvRecord = { [key: string]: string };\n\nexport const fileParserUtil = {\n\n    parseCsvFile: (file: File) => {\n        const output = new Promise<Transaction[]>((resolve) => {\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n                const fileContent = e.target.result;\n                const lines = fileContent.split(/\\r?\\n/);\n\n                // Find the header line starting with 'TRAN DATE,'\n                const headerLineIndex = lines.findIndex((line: string) => line.startsWith(CSV_START_STR));\n                if (headerLineIndex === -1) {\n                    throw new Error(`Header line starting with '${CSV_START_STR}' not found.`);\n                }\n\n                // Parse the header line and extract the columns\n                const headers = lines[headerLineIndex].split(',');\n\n                // Parse the remaining lines into JSON objects\n                const records: CsvRecord[] = [];\n                for (let i = headerLineIndex + 1; i < lines.length; i += 1) {\n                    const line = lines[i].trim();\n                    if (line) {\n                        const values = line.split(',');\n                        const record: CsvRecord = {};\n                        headers.forEach((header: string, index: number) => {\n                            if (header) {\n                                record[header] = values[index] || ''; // Handle missing values\n                            }\n                        });\n                        records.push(record);\n                    }\n                }\n                resolve(fileParserUtil.parseCsvTransactions(records));\n            };\n            reader.readAsBinaryString(file);\n        });\n        return output;\n    },\n\n    parseXLS: (file: File) => new Promise<Transaction[]>((resolve) => {\n        const reader = new FileReader();\n        reader.onload = (e: any) => {\n            const workBook = XLSX.read(e.target.result, {\n                type: 'binary',\n            });\n            const worksheet = workBook.Sheets[workBook.SheetNames[0]];\n            const data = XLSX.utils.sheet_to_json(worksheet);\n            const trans = fileParserUtil.parseTransactions(data as { [key: string]: string; }[]);\n            resolve(trans);\n        };\n        reader.readAsBinaryString(file);\n    }),\n\n    parseAmount: (input: any) => {\n        let out: any;\n        if (typeof input === 'string') {\n            out = parseFloat(input.replace('Cr', '').replaceAll(',', ''));\n        } else {\n            out = input;\n        }\n        return out;\n    },\n\n    getWorkingColumnKeyFromArray:\n        (cols: string[], input: any) => cols.find((col) => !!input[`${XLS_TRANS_KEY_PREFIX}${col}`]),\n\n    parseCsvTransactions: (input: { [key: string]: string; }[]) => {\n        let trans: Transaction[] = [];\n        if (input.length) {\n            const dateKey = CsvTransKeys.DATE_KEY;\n            const data = input.filter((row) =>\n                row[dateKey] && row[dateKey].length === 10 && row[dateKey].includes('/') &&\n                moment(row[dateKey], 'dd/MM/YYYY').toDate().toString() !== 'Invalid Date');\n            const balanceKey = CsvTransKeys.BALANCE_KEY;\n            const descKey = CsvTransKeys.DESC_KEY;\n            const chqNoKey = CsvTransKeys.CHQ_NO_KEY;\n            trans = data.map((row) => {\n                const out: Transaction = {\n                    Date: moment(row[dateKey], 'DD/MM/YYYY').toDate(),\n                    Description: row[descKey],\n                    'Cheque No': row[chqNoKey] || '',\n                    Debit: 0,\n                    Credit: 0,\n                    Total: fileParserUtil.parseAmount(row[balanceKey]),\n                    type: 'ONLINE',\n                };\n                if (row[CsvTransKeys.WITHDRAWAL_KEY]) {\n                    out.Debit = fileParserUtil.parseAmount(row[CsvTransKeys.WITHDRAWAL_KEY]);\n                }\n                if (row[CsvTransKeys.DEPOSIT_KEY]) {\n                    out.Credit = fileParserUtil.parseAmount(row[CsvTransKeys.DEPOSIT_KEY]);\n                }\n                return out;\n            });\n        }\n        return trans;\n    },\n\n    parseTransactions: (input: { [key: string]: string; }[]) => {\n        let trans: Transaction[] = [];\n        if (input.length) {\n            const dateKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DATE_KEY}`;\n            const data = input.filter((row) =>\n                row[dateKey] && row[dateKey].length === 10 && row[dateKey].includes('/') &&\n                moment(row[dateKey], 'dd/MM/YYYY').toDate().toString() !== 'Invalid Date');\n            let balanceKey = fileParserUtil.getWorkingColumnKeyFromArray(xLSTransKeys.BALANCE_KEY, data[0]) || '';\n            const descKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DESC_KEY}`;\n            const chqNoKey = `${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.CHQ_NO_KEY}`;\n            balanceKey = `${XLS_TRANS_KEY_PREFIX}${balanceKey}`;\n            trans = data.map((row) => {\n                const out: Transaction = {\n                    Date: moment(row[dateKey], 'DD/MM/YYYY').toDate(),\n                    Description: row[descKey],\n                    'Cheque No': row[chqNoKey] || '',\n                    Debit: 0,\n                    Credit: 0,\n                    Total: fileParserUtil.parseAmount(row[balanceKey]),\n                    type: 'ONLINE',\n                };\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]) {\n                    out.Debit = fileParserUtil.parseAmount(\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.WITHDRAWAL_KEY}`]);\n                }\n                if (row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]) {\n                    out.Credit = fileParserUtil.parseAmount(\n                        row[`${XLS_TRANS_KEY_PREFIX}${xLSTransKeys.DEPOSIT_KEY}`]);\n                }\n                return out;\n            });\n        }\n        return trans;\n    },\n};\nexport default fileParserUtil;\n","import React, { useCallback, useState, useContext, useMemo } from 'react';\nimport moment from 'moment';\nimport {\n    TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody,\n} from '@mui/material';\nimport AppContext from '../../services';\nimport { Transaction } from '../../services/service-types';\nimport './index.css';\n\nexport type FilePreviewProps = {\n    name: string;\n    xlsData: Transaction[];\n}\nexport const FilePreview = (props: FilePreviewProps) => {\n    const { xlsData: rows, name } = props;\n    const months: { [key: string]: string; } = useMemo(() => {\n        const monthList: { [key: string]: string; } = {};\n        rows.forEach((row) => {\n            const month = moment(row.Date).format('MMM-YY');\n            monthList[month] = month;\n        });\n        return monthList;\n    }, [rows]);\n    const monthsArray = Object.values(months);\n    const [selMonth, setSelMonth] = useState(monthsArray.length === 1 ? monthsArray[0] : '');\n    const { appData } = useContext(AppContext);\n    appData.transSheetMonth = selMonth;\n    const handleMonthChange = useCallback((e: any) => {\n        if (e.target.value) {\n            appData.transSheetMonth = e.target.value;\n            setSelMonth(e.target.value);\n        }\n    }, [appData]);\n    let filteredRows = rows;\n    if (selMonth) {\n        filteredRows = rows.filter((row) => moment(row.Date).format('MMM-YY') === selMonth);\n        appData.transactions = filteredRows;\n    }\n    const saveSheet = useCallback(() => {\n        // gsheetUtil.addSheet({\n        //     headerValues: [\n        //         'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category',\n        //     ],\n        //     title: 'Online Transactions',\n        // }).then((sheet) => {\n        //     resolve([]);\n        // });\n    }, []);\n    return (\n        <>\n            <div className=\"preview-header\">\n                <div>\n                    File: <h4>{name}</h4>\n                </div>\n                {/* <div className=\"tools\">\n                    <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\n                </div> */}\n                {/* <div className=\"month-filter\">\n                    Month: &nbsp;\n                    <Select\n                        value={selMonth}\n                        onChange={handleMonthChange}\n                        displayEmpty\n                        inputProps={{ 'aria-label': 'Month Filter' }}\n                    >\n                        <MenuItem value=\"\"><em>Select a Month:</em></MenuItem>\n                        {monthsArray.map((month) => (\n                            <MenuItem value={month}>{month}</MenuItem>\n                        ))}\n                    </Select>\n                </div> */}\n            </div>\n            <TableContainer className=\"xls-file-preview\" component={Paper}>\n                <Table size=\"small\" stickyHeader aria-label=\"Parsed Bank Transactions\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>#</TableCell>\n                            <TableCell>Date</TableCell>\n                            <TableCell>Description</TableCell>\n                            <TableCell align=\"right\">Cheque No.</TableCell>\n                            <TableCell align=\"right\">Debit</TableCell>\n                            <TableCell align=\"right\">Credit</TableCell>\n                            <TableCell align=\"right\">Total</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {filteredRows.map((row, index) => (\n                            <TableRow key={`${row.Date}-${row.Description}`}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {index + 1}\n                                </TableCell>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {moment(row.Date).format('DD-MM-YYYY')}\n                                </TableCell>\n                                <TableCell>{row.Description}</TableCell>\n                                <TableCell align=\"right\">{row['Cheque No']}</TableCell>\n                                <TableCell align=\"right\">{row.Debit}</TableCell>\n                                <TableCell align=\"right\">{row.Credit}</TableCell>\n                                <TableCell align=\"right\">{row.Total}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\nexport default FilePreview;\n","import moment from 'moment';\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { Button } from '@mui/material';\nimport gsheetUtil from '../../services/googleapis/gsheet-util-impl';\n\nfunction FileSave(props: { data: { [key: string]: any }[] }) {\n    const { data } = props;\n    const [msg, setMsg] = useState('');\n    useEffect(() => {\n        gsheetUtil.init();\n    }, []);\n\n    const saveSheet = useCallback(async () => {\n        const sheetTitle = 'Online Transactions';\n        const sheet = await gsheetUtil.getSheetByTitle(sheetTitle);\n        if (!sheet) {\n            await gsheetUtil.addSheet({\n                headerValues: [\n                    'Date', 'Description', 'Cheque No', 'Debit', 'Credit', 'Total', 'Category', 'Flat',\n                ],\n                title: sheetTitle,\n            });\n        }\n        const sheetData = (JSON.parse(JSON.stringify(data)) as any[]).map((row) => {\n            row.Date = moment(row.Date).format('DD-MM-YYYY');\n            return row;\n        });\n        await gsheetUtil.updateSheetWithJSON(sheetData, sheetTitle);\n        setMsg('Sheet Updated');\n    }, [data]);\n    return (\n        <>\n            <p>{msg}</p>\n            <div className=\"tools\">\n                <Button variant=\"outlined\" onClick={saveSheet}>Save Sheet</Button>\n            </div>\n        </>\n    );\n}\n\nexport default FileSave;\n","import React, { useCallback, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n    Alert, Stepper, Typography, Step, StepLabel, Button,\n} from '@mui/material';\nimport FileUpload from '../file-upload';\nimport fileParserUtil from '../../services/xlsjs';\nimport FilePreview from '../file-preview';\nimport FileSave from '../file-save';\nimport { Transaction } from '../../services/service-types';\nimport { GoogleSheet } from '../../services/redux/google-sheet/sheet-types';\nimport './index.css';\n\nfunction getSteps() {\n    return ['File Upload', 'File Preview', 'Save'];\n}\n\nexport const OnlineTransactionParser = () => {\n    const { sheetConfig } : GoogleSheet = useSelector((state: any) => state.sheet);\n    const [errorMsg, setErrorMsg] = useState<string>('');\n    const [activeStep, setActiveStep] = useState(0);\n    const [fileName, setFileName] = useState('');\n    const [bankTransactions, setBankTransactions] = useState<Transaction[]>([]);\n    const parseDataFile = useCallback((file: File) => {\n        setFileName(file.name);\n        let parserFunction = fileParserUtil.parseXLS;\n        if (file.type === 'text/csv') {\n            parserFunction = fileParserUtil.parseCsvFile;\n        }\n        parserFunction(file).then((resp: Transaction[]) => {\n            sheetConfig.appData.transactions = resp;\n            resp.reverse();\n            setBankTransactions(resp);\n            setErrorMsg('');\n            setActiveStep(1);\n        });\n    }, [sheetConfig.appData]);\n    const getStepContent = useCallback((step: number) => {\n        switch (step) {\n        case 0:\n            return (<FileUpload onUpload={parseDataFile} />);\n        case 1:\n            return (<FilePreview name={fileName} xlsData={bankTransactions} />);\n        case 2:\n            return (<FileSave data={bankTransactions as any} />);\n        default:\n            return 'Unknown step';\n        }\n    }, [bankTransactions, parseDataFile, fileName]);\n    const [skipped, setSkipped] = useState(new Set<number>());\n    const steps = getSteps();\n\n    const isStepOptional = (step: number) => false;\n\n    const isStepSkipped = useCallback((step: number) => skipped.has(step), [skipped]);\n\n    const handleNext = useCallback(async () => {\n        let newSkipped = skipped;\n        if (isStepSkipped(activeStep)) {\n            newSkipped = new Set(newSkipped.values());\n            newSkipped.delete(activeStep);\n        }\n        switch (activeStep) {\n        case 0: {\n            if (fileName) {\n                setActiveStep((prevActiveStep) => prevActiveStep + 1);\n                setErrorMsg('');\n            } else {\n                setErrorMsg('Select a file.');\n            }\n            break;\n        }\n        case 1:\n        default:\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n            setErrorMsg('');\n        }\n        setSkipped(newSkipped);\n    }, [activeStep, fileName, isStepSkipped, skipped]);\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleSkip = () => {\n        if (!isStepOptional(activeStep)) {\n            // You probably want to guard against something like this,\n            // it should never occur unless someone's actively trying to break something.\n            throw new Error(\"You can't skip a step that isn't optional.\");\n        }\n\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        setSkipped((prevSkipped) => {\n            const newSkipped = new Set(prevSkipped.values());\n            newSkipped.add(activeStep);\n            return newSkipped;\n        });\n    };\n    const handleReset = useCallback(() => {\n        setActiveStep(0);\n    }, []);\n    return (\n        <div className=\"wizard\">\n            {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n            <div>\n                <Stepper activeStep={activeStep}>\n                    {steps.map((label, index) => {\n                        const stepProps: { completed?: boolean } = {};\n                        const labelProps: { optional?: React.ReactNode } = {};\n                        if (isStepOptional(index)) {\n                            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n                        }\n                        if (isStepSkipped(index)) {\n                            stepProps.completed = false;\n                        }\n                        return (\n                            <Step key={label} {...stepProps}>\n                                <StepLabel {...labelProps}>{label}</StepLabel>\n                            </Step>\n                        );\n                    })}\n                </Stepper>\n                <div>\n                    {activeStep === steps.length && (\n                        <div>\n                            <Typography>\n                                All steps completed - you&apos;re finished\n                            </Typography>\n                            <Button onClick={handleReset}>\n                                Reset\n                            </Button>\n                        </div>\n                    )}\n                    {activeStep !== steps.length && (\n                        <div>\n                            <Typography>\n                                {getStepContent(activeStep)}\n                            </Typography>\n                            <div>\n                                <Button\n                                    disabled={activeStep === 0}\n                                    onClick={handleBack}\n                                >\n                                    Back\n                                </Button>\n                                {isStepOptional(activeStep) && (\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleSkip}\n                                    >\n                                        Skip\n                                    </Button>\n                                )}\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={handleNext}\n                                >\n                                    {(activeStep === steps.length - 1 && 'Save') || 'Next'}\n                                </Button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default OnlineTransactionParser;\n","import React from 'react';\nimport OnlineTransactionParser from '../components/online-transactions';\n\nconst OnlineTransactions: React.FC = () => (\n    <OnlineTransactionParser />\n);\n\nexport default OnlineTransactions;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { TextField, Typography, Container, Box } from '@mui/material';\nimport CheckCircleRoundedIcon from '@mui/icons-material/CheckCircleRounded';\nimport { decrypt, encrypt } from '../../services';\nimport './key.css';\n\nconst EncryptKeyComponent = () => {\n    const [key, setKey] = useState('');\n    const [encryptedValue, setEncryptedValue] = useState('');\n    const [decryptedValue, setDecryptedValue] = useState('');\n    const [copyMessage, setCopyMessage] = useState('');\n\n    const handleChange = useCallback((e: any) => {\n        const newKey = e.target.value;\n        setKey(newKey);\n        const eKey = encrypt(newKey);\n        setEncryptedValue(eKey);\n        setDecryptedValue(decrypt(eKey));\n    }, []);\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(encryptedValue);\n        setCopyMessage('Encrypted value copied to clipboard!');\n        setTimeout(() => {\n            setCopyMessage('');\n        }, 3000);\n    }, [encryptedValue]);\n\n    const decryptLabel = useMemo(() => {\n        let out = <>Decrypted Value</>;\n        if (key === decryptedValue) {\n            out = <>Decrypted Value <CheckCircleRoundedIcon className=\"encrypt-check\" /> </>;\n        }\n        return out;\n    }, [decryptedValue, key]);\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Typography variant=\"h4\" gutterBottom>\n                Key Encryption\n            </Typography>\n            <TextField\n                label=\"Enter Key\"\n                variant=\"outlined\"\n                fullWidth\n                margin=\"normal\"\n                value={key}\n                onChange={handleChange}\n            />\n            {encryptedValue && (\n                <Box marginTop=\"20px\">\n                    <TextField\n                        label=\"Encrypted Value\"\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        value={encryptedValue}\n                        InputProps={{\n                            readOnly: true,\n                        }}\n                        onClick={handleCopy}\n                    />\n                    {copyMessage && (\n                        <Typography variant=\"body2\" color=\"primary\">\n                            {copyMessage}\n                        </Typography>\n                    )}\n                </Box>\n            )}\n            {decryptedValue && (\n                <Box marginTop=\"20px\">\n                    <TextField\n                        label={decryptLabel}\n                        variant=\"outlined\"\n                        fullWidth\n                        margin=\"normal\"\n                        value={decryptedValue}\n                        InputProps={{\n                            readOnly: true,\n                        }}\n                    />\n                </Box>\n            )}\n        </Container>\n    );\n};\n\nexport default EncryptKeyComponent;\n","import React from 'react';\nimport KeyGen from '../../components/key-gen';\n\nfunction Key() {\n    return (\n        <KeyGen />\n    );\n}\n\nexport default Key;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport CashTransactions from './workspaces/cash';\nimport Categorizer from './workspaces/categorizer';\nimport BillParser from './workspaces/new-bills';\nimport OnlineTransactionParser from './workspaces/online';\nimport KeyGen from './workspaces/key';\n\nfunction AppRoutes() {\n    return (\n        <Routes>\n            <Route>\n                <Route path=\"/\" element={<OnlineTransactionParser />} />\n                <Route path=\"/cat\" element={<Categorizer />} />\n                <Route path=\"/bills\" element={<BillParser />} />\n                <Route path=\"/cash\" element={<CashTransactions />} />\n                <Route path=\"/gen-key\" element={<KeyGen />} />\n            </Route>\n        </Routes>\n    );\n}\n\nexport default AppRoutes;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport Alert from '@mui/material/Alert';\nimport { Provider } from 'react-redux';\nimport KeyboardDoubleArrowLeftIcon from '@mui/icons-material/KeyboardDoubleArrowLeft';\nimport KeyboardDoubleArrowRightIcon from '@mui/icons-material/KeyboardDoubleArrowRight';\nimport CategoryIcon from '@mui/icons-material/Category';\nimport HomeIcon from '@mui/icons-material/Home';\nimport CurrencyRupeeIcon from '@mui/icons-material/CurrencyRupee';\nimport HandymanIcon from '@mui/icons-material/Handyman';\nimport ReceiptIcon from '@mui/icons-material/Receipt';\nimport { Sidebar, Menu, MenuItem } from 'react-pro-sidebar';\nimport store from './services/redux/store';\nimport SecretDialog from './components/mapping/secret-dialog';\nimport { getConfig, setCredentials } from './services';\nimport AppRoutes from './app-routes';\nimport './app.css';\n\nfunction App() {\n    const [errorMsg, setErrorMsg] = useState<string>('');\n    const [secret, setSecret] = useState('');\n    const [secretSuccess, setSecretSuccess] = useState<boolean>(!!getConfig().secret);\n    useEffect(() => {\n        if (secret) {\n            const out = setCredentials(secret);\n            if (!out.res) {\n                setErrorMsg('Wrong secret. Enter it again.');\n                setSecret('');\n            } else {\n                setErrorMsg('');\n                setSecretSuccess(true);\n            }\n        }\n    }, [secret]);\n    const [collapsed, setCollapsed] = useState(false);\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n                <header className=\"app-header\">\n                    <img src=\"/images/ssfa.png\" alt=\"Suraksha Sunflower Apartment\" width=\"80px\" height=\"60px\" />\n                    <span>Suraksha Sunflower </span>\n                </header>\n                <div className=\"app\">\n                    <Sidebar collapsed={collapsed}>\n                        <Menu>\n                            <MenuItem icon={<HomeIcon />} title=\"Parse Online Transactions\">\n                                <Link to=\"/\">Parse Online Transactions</Link>\n                            </MenuItem>\n                            <MenuItem icon={<CategoryIcon />} title=\"Categorize Transactions\">\n                                <Link to=\"/cat\">Categorize Transactions</Link>\n                            </MenuItem>\n                            <MenuItem icon={<ReceiptIcon />} title=\"Upload Bills\">\n                                <Link to=\"/bills\">Process Bills</Link>\n                            </MenuItem>\n                            {/* <MenuItem icon={<CurrencyRupeeIcon />} title=\"Cash Transactions\">\n                                <Link to=\"/cash\">Cash Transactions</Link>\n                            </MenuItem> */}\n                            <MenuItem icon={<HandymanIcon />} title=\"Generate Encrypted Keys\">\n                                <Link to=\"/gen-key\">Encrypt Keys</Link>\n                            </MenuItem>\n                            {/* <SubMenu title=\"Components\">\n                            <MenuItem>Component 1</MenuItem>\n                            <MenuItem>Component 2</MenuItem>\n                        </SubMenu> */}\n                        </Menu>\n                        <div className=\"sb-footer\">\n                            {!collapsed &&\n                            <KeyboardDoubleArrowLeftIcon onClick={() => setCollapsed(true)} />}\n                            {collapsed &&\n                            <KeyboardDoubleArrowRightIcon onClick={() => setCollapsed(false)} />}\n                        </div>\n                    </Sidebar>\n                    <div className=\"workspace\">\n                        {errorMsg && <Alert severity=\"error\">{errorMsg}</Alert>}\n                        {!secretSuccess && (\n                            <SecretDialog errorMsg={errorMsg} handleSecret={setSecret} />\n                        )}\n                        {secretSuccess && <AppRoutes />}\n                    </div>\n                </div>\n            </BrowserRouter>\n        </Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './app';\nimport './index.css';\n\nconst container = document.getElementById('root');\nconst root = createRoot(container!);\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n);\n\nexport default {};\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}